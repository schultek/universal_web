// Copyright (c) 2025, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
//
// API docs from [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web).
// Attributions and copyright licensing by Mozilla Contributors is licensed
// under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/.

// Generated from Web IDL definitions.

// ignore_for_file: unintended_html_in_doc_comment

import '../error.dart';
import '../js_interop.dart';
import 'css_font_loading.dart';
import 'css_typed_om.dart';
import 'css_view_transitions.dart';
import 'cssom.dart';
import 'cssom_view.dart';
import 'fullscreen.dart';
import 'geometry.dart';
import 'html.dart';
import 'pointerlock.dart';
import 'selection_api.dart';
import 'svg.dart';
import 'web_animations.dart';

typedef MutationCallback = JSFunction;
typedef EventListener = JSFunction;
typedef NodeFilter = JSFunction;
typedef XPathNSResolver = JSFunction;
typedef ShadowRootMode = String;
typedef SlotAssignmentMode = String;

/// The **`Event`** interface represents an event which takes place on an
/// [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget).
///
/// An event can be triggered by the user action e.g. clicking the mouse button
/// or tapping keyboard, or generated by APIs to represent the progress of an
/// asynchronous task. It can also be triggered programmatically, such as by
/// calling the
/// [`HTMLElement.click()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click)
/// method of an element, or by defining the event, then sending it to a
/// specified target using
/// [`EventTarget.dispatchEvent()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent).
///
/// There are many types of events, some of which use other interfaces based on
/// the main `Event` interface. `Event` itself contains the properties and
/// methods which are common to all events.
///
/// Many DOM elements can be set up to accept (or "listen" for) these events,
/// and execute code in response to process (or "handle") them. Event-handlers
/// are usually connected (or "attached") to various
/// [HTML elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)
/// (such as `<button>`, `<div>`, `<span>`, etc.) using
/// [`EventTarget.addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener),
/// and this generally replaces using the old HTML
/// [event handler attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes).
/// Further, when properly added, such handlers can also be disconnected if
/// needed using
/// [`removeEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener).
///
/// > **Note:** One element can have several such handlers, even for the exact
/// > same event—particularly if separate, independent code modules attach them,
/// > each for its own independent purposes. (For example, a webpage with an
/// > advertising-module and statistics-module both monitoring video-watching.)
///
/// When there are many nested elements, each with its own handler(s), event
/// processing can become very complicated—especially where a parent element
/// receives the very same event as its child elements because "spatially" they
/// overlap so the event technically occurs in both, and the processing order of
/// such events depends on the
/// [Event bubbling and capture](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling_and_capture)
/// settings of each handler triggered.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Event).
extension type Event._(JSObject _) implements JSObject {
  factory Event(
    String type, [
    EventInit? eventInitDict,
  ]) {
    unsupportedPlatformError();
  }

  static const int NONE = 0;

  static const int CAPTURING_PHASE = 1;

  static const int AT_TARGET = 2;

  static const int BUBBLING_PHASE = 3;

  /// The **`composedPath()`** method of the [Event]
  /// interface returns the event's path which is an array of the objects on
  /// which listeners
  /// will be invoked. This does not include nodes in shadow trees if the shadow
  /// root was
  /// created with its [ShadowRoot.mode] closed.
  JSArray<EventTarget> composedPath() {
    unsupportedPlatformError();
  }

  /// The **`stopPropagation()`** method of the [Event]
  /// interface prevents further propagation of the current event in the
  /// capturing and
  /// bubbling phases. It does not, however, prevent any default behaviors from
  /// occurring; for
  /// instance, clicks on links are still processed. If you want to stop those
  /// behaviors, see
  /// the [Event.preventDefault] method. It also does not
  /// prevent propagation to other event-handlers of the current element. If you
  /// want to stop those,
  /// see [Event.stopImmediatePropagation].
  void stopPropagation() {
    unsupportedPlatformError();
  }

  /// The **`stopImmediatePropagation()`** method of the
  /// [Event] interface prevents other listeners of the same event from being
  /// called.
  ///
  /// If several listeners are attached to the same element for the same event
  /// type, they are called in the order in which they were added. If
  /// `stopImmediatePropagation()` is invoked during one such call, no remaining
  /// listeners will be called, either on that element or any other element.
  void stopImmediatePropagation() {
    unsupportedPlatformError();
  }

  /// The **`preventDefault()`** method of the [Event] interface tells the  that
  /// if the event does not get explicitly handled, its default action should
  /// not be taken as it normally would be.
  ///
  /// The event continues to propagate as usual,
  /// unless one of its event listeners calls
  /// [Event.stopPropagation]
  /// or [Event.stopImmediatePropagation],
  /// either of which terminates propagation at once.
  ///
  /// As noted below, calling **`preventDefault()`** for a
  /// non-cancelable event, such as one dispatched via
  /// [EventTarget.dispatchEvent], without specifying
  /// `cancelable: true` has no effect.
  void preventDefault() {
    unsupportedPlatformError();
  }

  /// The **`Event.initEvent()`** method is used to initialize the
  /// value of an [event] created using [Document.createEvent].
  ///
  /// Events initialized in this way must have been created with the
  /// [Document.createEvent] method.
  /// This method must be called to set the event
  /// before it is dispatched, using [EventTarget.dispatchEvent].
  /// Once dispatched, it doesn't do anything anymore.
  ///
  /// > **Note:** _Do not use this method anymore as it is deprecated._
  /// > Instead use specific event constructors, like [Event.Event].
  /// > The page on
  /// > [Creating and triggering events](https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events)
  /// > gives more information about the way to use these.
  void initEvent(
    String type, [
    bool? bubbles,
    bool? cancelable,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`type`** read-only property of the [Event]
  /// interface returns a string containing the event's type. It is set when the
  /// event is
  /// constructed and is the name commonly used to refer to the specific event,
  /// such as
  /// `click`, `load`, or `error`.
  String get type {
    unsupportedPlatformError();
  }

  /// The read-only **`target`** property of the
  /// [Event] interface is a reference to the object onto which the event was
  /// dispatched. It is different from [Event.currentTarget] when the event
  /// handler is called during the bubbling or capturing phase of the event.
  EventTarget? get target {
    unsupportedPlatformError();
  }

  /// The deprecated **`Event.srcElement`** is an alias for the [Event.target]
  /// property. Use [Event.target] instead.
  EventTarget? get srcElement {
    unsupportedPlatformError();
  }

  /// The **`currentTarget`** read-only property of the [Event] interface
  /// identifies the element to which the event handler has been attached.
  ///
  /// This will not always be the same as the element on which the event was
  /// fired, because the event may have fired on a descendant of the element
  /// with the handler, and then
  /// [bubbled](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling)
  /// up to the element with the handler. The element on which the event was
  /// fired is given by [Event.target].
  ///
  /// Note that the value of `currentTarget` is only available in a handler for
  /// the event. Outside an event handler it will be `null`. This means that,
  /// for example, if you take a reference to the `Event` object inside an event
  /// handler and then access its `currentTarget` property outside the event
  /// handler, its value will be `null`.
  EventTarget? get currentTarget {
    unsupportedPlatformError();
  }

  /// The **`eventPhase`** read-only property of the
  /// [Event] interface indicates which phase of the event flow is currently
  /// being evaluated.
  int get eventPhase {
    unsupportedPlatformError();
  }

  /// The **`cancelBubble`** property of the [Event]
  /// interface is deprecated. Use [Event.stopPropagation] instead.
  /// Setting its value to `true` before returning from an event handler
  /// prevents propagation
  /// of the event. In later implementations, setting this to `false` does
  /// nothing.
  /// See [Browser compatibility](#browser_compatibility) for details.
  bool get cancelBubble {
    unsupportedPlatformError();
  }

  set cancelBubble(bool value) {
    unsupportedPlatformError();
  }

  /// The **`bubbles`** read-only property of the [Event] interface indicates
  /// whether the event bubbles up through the DOM tree or not.
  ///
  /// > **Note:** See
  /// > [Event bubbling and capture](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling)
  /// > for more information on bubbling.
  bool get bubbles {
    unsupportedPlatformError();
  }

  /// The **`cancelable`** read-only property of the [Event] interface indicates
  /// whether the event
  /// can be canceled, and therefore prevented as if the event never happened.
  ///
  /// If the event is _not_ cancelable, then its `cancelable` property will be
  /// `false` and the event listener cannot stop the event from occurring.
  ///
  /// Most browser-native events that can be canceled are the ones that result
  /// from the user
  /// interacting with the page. Canceling the [Element.click_event],
  /// [Element.wheel_event], or
  /// [Window.beforeunload_event] events would prevent the user
  /// from clicking on something, scrolling the page with the mouse wheel, or
  /// navigating away from the page, respectively.
  ///
  /// [Synthetic events](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
  /// created by other JavaScript
  /// code define if they can be canceled when they are created.
  ///
  /// To cancel an event, call the [event.preventDefault]
  /// method on the event. This keeps the implementation from executing the
  /// default action
  /// that is associated with the event.
  ///
  /// Event listeners that handle multiple kinds of events may want to check
  /// `cancelable` before invoking their [event.preventDefault] methods.
  bool get cancelable {
    unsupportedPlatformError();
  }

  /// The [Event] property
  /// **`returnValue`** indicates whether the default action for
  /// this event has been prevented or not.
  ///
  /// It is set to `true` by
  /// default, allowing the default action to occur. Setting this property to
  /// `false` prevents the default action.
  ///
  /// > **Note:** While `returnValue` has been adopted into the DOM
  /// > standard, it is present primarily to support existing code. Use
  /// > [Event.preventDefault], and
  /// > [Event.defaultPrevented] instead of this historical
  /// > property.
  bool get returnValue {
    unsupportedPlatformError();
  }

  set returnValue(bool value) {
    unsupportedPlatformError();
  }

  /// The **`defaultPrevented`** read-only property of the [Event] interface
  /// returns a boolean value indicating whether or not the call to
  /// [Event.preventDefault] canceled the event.
  bool get defaultPrevented {
    unsupportedPlatformError();
  }

  /// The read-only **`composed`** property of the
  /// [Event] interface returns a boolean value which indicates whether
  /// or not the event will propagate across the shadow DOM boundary into the
  /// standard DOM.
  ///
  /// All UA-dispatched UI events are composed
  /// (click/touch/mouseover/copy/paste, etc.). Most
  /// other types of events are not composed, and so will return `false`. For
  /// example, this includes synthetic events that are created without their
  /// `composed` option set to `true`.
  ///
  /// Propagation only occurs if the [Event.bubbles] property is also
  /// `true`. However, capturing only composed events are also handled at host
  /// as
  /// if they were in `AT_TARGET` phase. You can determine the path the event
  /// will
  /// follow through the shadow root to the DOM root by calling
  /// [Event.composedPath].
  bool get composed {
    unsupportedPlatformError();
  }

  /// The **`isTrusted`** read-only property of the
  /// [Event] interface is a boolean value that is `true`
  /// when the event was generated by the user agent (including via user actions
  /// and programmatic methods such as [HTMLElement.focus]),
  /// and `false` when the event was dispatched via
  /// [EventTarget.dispatchEvent].
  /// The only exception is the `click` event, which initializes the `isTrusted`
  /// property to `false` in user agents.
  bool get isTrusted {
    unsupportedPlatformError();
  }

  /// The **`timeStamp`** read-only property of the [Event] interface returns
  /// the time (in milliseconds) at which the event was created.
  double get timeStamp {
    unsupportedPlatformError();
  }
}
extension type EventInit._(JSObject _) implements JSObject {
  factory EventInit({
    bool? bubbles,
    bool? cancelable,
    bool? composed,
  }) {
    unsupportedPlatformError();
  }

  bool get bubbles {
    unsupportedPlatformError();
  }

  set bubbles(bool value) {
    unsupportedPlatformError();
  }

  bool get cancelable {
    unsupportedPlatformError();
  }

  set cancelable(bool value) {
    unsupportedPlatformError();
  }

  bool get composed {
    unsupportedPlatformError();
  }

  set composed(bool value) {
    unsupportedPlatformError();
  }
}

/// The **`CustomEvent`** interface represents events initialized by an
/// application for any purpose.
///
/// > **Note:** If used to attempt to communicate between a web extension
/// > content script and a web page script, a non-string `detail` property
/// > throws with "Permission denied to access property" in Firefox. To avoid
/// > this issue clone the object. See
/// > [Share objects with page scripts](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Sharing_objects_with_page_scripts)
/// > for more information.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
extension type CustomEvent._(JSObject _) implements Event, JSObject {
  factory CustomEvent(
    String type, [
    CustomEventInit? eventInitDict,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`CustomEvent.initCustomEvent()`** method initializes a [CustomEvent]
  /// object.
  /// If the event has already been dispatched, this method does nothing.
  ///
  /// Events initialized in this way must have been created with the
  /// [Document.createEvent] method.
  /// This method must be called to set the event before it is dispatched using
  /// [EventTarget.dispatchEvent].
  /// Once dispatched, it doesn't do anything anymore.
  ///
  /// > **Note:** **Do not use this method anymore, as it is deprecated.**
  /// >
  /// > Rather than using the feature, instead use specific event constructors,
  /// > like [CustomEvent.CustomEvent].
  /// > The page on
  /// > [Creating and triggering events](https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events)
  /// > gives more information about the way to use those.
  void initCustomEvent(
    String type, [
    bool? bubbles,
    bool? cancelable,
    JSAny? detail,
  ]) {
    unsupportedPlatformError();
  }

  /// The read-only **`detail`** property of the [CustomEvent] interface returns
  /// any data passed when initializing the event.
  JSAny? get detail {
    unsupportedPlatformError();
  }
}
extension type CustomEventInit._(JSObject _) implements EventInit, JSObject {
  factory CustomEventInit({
    bool? bubbles,
    bool? cancelable,
    bool? composed,
    JSAny? detail,
  }) {
    unsupportedPlatformError();
  }

  JSAny? get detail {
    unsupportedPlatformError();
  }

  set detail(JSAny? value) {
    unsupportedPlatformError();
  }
}

/// The **`EventTarget`** interface is implemented by objects that can receive
/// events and may have listeners for them.
/// In other words, any target of events implements the three methods associated
/// with this interface.
///
/// [Element], and its children, as well as [Document] and [Window], are the
/// most common event targets,
/// but other objects can be event targets, too.
/// For example [IDBRequest], [AudioNode], and [AudioContext] are also event
/// targets.
///
/// Many event targets (including elements, documents, and windows) also support
/// setting
/// [event handlers](https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers)
/// via `onevent` properties and attributes.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget).
extension type EventTarget._(JSObject _) implements JSObject {
  factory EventTarget() {
    unsupportedPlatformError();
  }

  /// The **`addEventListener()`** method of the [EventTarget] interface
  /// sets up a function that will be called whenever the specified event is
  /// delivered to the target.
  ///
  /// Common targets are [Element], or its children, [Document], and [Window],
  /// but the target may be any object that supports events (such as
  /// [IDBRequest]).
  ///
  /// > **Note:** The `addEventListener()` method is the _recommended_ way to
  /// > register an event listener. The benefits are as follows:
  /// >
  /// > - It allows adding more than one handler for an event. This is
  /// > particularly
  /// > useful for libraries, JavaScript modules, or any other kind of
  /// > code that needs to work well with other libraries or extensions.
  /// > - In contrast to using an `onXYZ` property, it gives you finer-grained
  /// > control of the phase when the listener is activated (capturing vs.
  /// > bubbling).
  /// > - It works on any event target, not just HTML or SVG elements.
  ///
  /// The method `addEventListener()` works by adding a function, or an object
  /// that implements a `handleEvent()` function, to the list of event listeners
  /// for the specified event type
  /// on the [EventTarget] on which it's called. If the function or object is
  /// already in the list of event listeners for this target, the function or
  /// object is not added a second time.
  ///
  /// > **Note:** If a particular anonymous function is in the list of event
  /// > listeners registered for a certain target, and then later in the code,
  /// > an identical anonymous function is given in an `addEventListener` call,
  /// > the second function will _also_ be added to the list of event listeners
  /// > for that target.
  /// >
  /// > Indeed, anonymous functions are not identical even if defined using
  /// > the _same_ unchanging source-code called repeatedly, **even if in a
  /// > loop**.
  /// >
  /// > Repeatedly defining the same unnamed function in such cases can be
  /// > problematic. (See [Memory issues](#memory_issues), below.)
  ///
  /// If an event listener is added to an [EventTarget] from inside another
  /// listener —
  /// that is, during the processing of the event —
  /// that event will not trigger the new listener.
  /// However, the new listener may be triggered during a later stage of event
  /// flow,
  /// such as during the bubbling phase.
  void addEventListener(
    String type,
    EventListener? callback, [
    JSAny? options,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`removeEventListener()`** method of the [EventTarget] interface
  /// removes an event listener previously registered with
  /// [EventTarget.addEventListener] from the target.
  /// The event listener to be removed is identified using a combination of the
  /// event type,
  /// the event listener function itself, and various optional options that may
  /// affect the matching process;
  /// see
  /// [Matching event listeners for removal](#matching_event_listeners_for_removal).
  ///
  /// Calling `removeEventListener()` with arguments that do not identify any
  /// currently registered
  /// [event listener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#the_event_listener_callback)
  /// on the `EventTarget` has no
  /// effect.
  ///
  /// If an
  /// [event listener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#the_event_listener_callback)
  /// is removed from an [EventTarget] while another listener of the target is
  /// processing an event, it will not be triggered by the event. However, it
  /// can be reattached.
  ///
  /// > **Warning:** If a listener is registered twice, one with the _capture_
  /// > flag set and one without, you must remove each one separately. Removal
  /// > of a capturing listener does not affect a non-capturing version of the
  /// > same listener, and vice versa.
  ///
  /// Event listeners can also be removed by passing an [AbortSignal] to an
  /// [EventTarget.addEventListener] and then later calling
  /// [AbortController.abort] on the controller owning the signal.
  void removeEventListener(
    String type,
    EventListener? callback, [
    JSAny? options,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`dispatchEvent()`** method of the [EventTarget] sends an [Event] to
  /// the object, (synchronously) invoking the affected
  /// event listeners in the appropriate order. The normal event processing
  /// rules (including the capturing and optional bubbling phase) also apply to
  /// events
  /// dispatched manually with `dispatchEvent()`.
  ///
  /// Calling `dispatchEvent()` is the last step to _firing an event_. The event
  /// should have already been created and initialized using an [Event.Event]
  /// constructor.
  ///
  /// > **Note:** When calling this method, the [Event.target] property is
  /// > initialized to the current `EventTarget`.
  ///
  /// Unlike "native" events, which are fired by the browser and invoke event
  /// handlers
  /// asynchronously via the
  /// [event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop),
  /// `dispatchEvent()` invokes event handlers _synchronously_. All applicable
  /// event
  /// handlers are called and return before `dispatchEvent()` returns.
  bool dispatchEvent(Event event) {
    unsupportedPlatformError();
  }
}
extension type EventListenerOptions._(JSObject _) implements JSObject {
  factory EventListenerOptions({bool? capture}) {
    unsupportedPlatformError();
  }

  bool get capture {
    unsupportedPlatformError();
  }

  set capture(bool value) {
    unsupportedPlatformError();
  }
}
extension type AddEventListenerOptions._(JSObject _)
    implements EventListenerOptions, JSObject {
  factory AddEventListenerOptions({
    bool? capture,
    bool? passive,
    bool? once,
    AbortSignal? signal,
  }) {
    unsupportedPlatformError();
  }

  bool get passive {
    unsupportedPlatformError();
  }

  set passive(bool value) {
    unsupportedPlatformError();
  }

  bool get once {
    unsupportedPlatformError();
  }

  set once(bool value) {
    unsupportedPlatformError();
  }

  AbortSignal get signal {
    unsupportedPlatformError();
  }

  set signal(AbortSignal value) {
    unsupportedPlatformError();
  }
}

/// The **`AbortController`** interface represents a controller object that
/// allows you to abort one or more Web requests as and when desired.
///
/// You can create a new `AbortController` object using the
/// [AbortController.AbortController] constructor. Communicating with an
/// asynchronous operation is done using an [AbortSignal] object.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/AbortController).
extension type AbortController._(JSObject _) implements JSObject {
  factory AbortController() {
    unsupportedPlatformError();
  }

  /// The **`abort()`** method of the [AbortController] interface aborts an
  /// asynchronous operation before it has completed.
  /// This is able to abort
  /// [fetch requests](https://developer.mozilla.org/en-US/docs/Web/API/fetch),
  /// the consumption of any response bodies, or streams.
  void abort([JSAny? reason]) {
    unsupportedPlatformError();
  }

  /// The **`signal`** read-only property of the [AbortController] interface
  /// returns an [AbortSignal] object instance, which can be used to communicate
  /// with/abort an asynchronous operation as desired.
  AbortSignal get signal {
    unsupportedPlatformError();
  }
}

/// The **`AbortSignal`** interface represents a signal object that allows you
/// to communicate with an asynchronous operation (such as a fetch request) and
/// abort it if required via an [AbortController] object.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal).
extension type AbortSignal._(JSObject _) implements EventTarget, JSObject {
  /// The **`AbortSignal.abort()`** static method returns an [AbortSignal] that
  /// is already set as aborted (and which does not trigger an
  /// [AbortSignal.abort_event] event).
  ///
  /// This is shorthand for the following code:
  ///
  /// ```js
  /// const controller = new AbortController();
  /// controller.abort();
  /// return controller.signal;
  /// ```
  ///
  /// This could, for example, be passed to a fetch method in order to run its
  /// abort logic (i.e. it may be that code is organized such that the abort
  /// logic should be run even if the intended fetch operation has not been
  /// started).
  ///
  /// > **Note:** The method is similar in purpose to `Promise.reject`.
  static AbortSignal abort([JSAny? reason]) {
    unsupportedPlatformError();
  }

  /// The **`AbortSignal.timeout()`** static method returns an [AbortSignal]
  /// that will automatically abort after a specified time.
  ///
  /// The signal aborts with a `TimeoutError` [DOMException] on timeout, or with
  /// `AbortError` [DOMException] due to pressing a browser stop button (or some
  /// other inbuilt "stop" operation).
  /// This allows UIs to differentiate timeout errors, which typically require
  /// user notification, from user-triggered aborts that do not.
  ///
  /// The timeout is based on active rather than elapsed time, and will
  /// effectively be paused if the code is running in a suspended worker, or
  /// while the document is in a back-forward cache
  /// ("[bfcache](https://web.dev/articles/bfcache)").
  ///
  /// To combine multiple signals, you can use [AbortSignal.any_static], for
  /// example, to directly abort a download using either a timeout signal or by
  /// calling [AbortController.abort].
  static AbortSignal timeout(int milliseconds) {
    unsupportedPlatformError();
  }

  /// The **`AbortSignal.any()`** static method takes an iterable of abort
  /// signals and returns an [AbortSignal]. The returned abort signal is aborted
  /// when any of the input iterable abort signals are aborted. The
  /// [AbortSignal.reason] will be set to the reason of the first signal that is
  /// aborted. If any of the given abort signals are already aborted then so
  /// will be the returned [AbortSignal].
  static AbortSignal any(JSArray<AbortSignal> signals) {
    unsupportedPlatformError();
  }

  /// The **`throwIfAborted()`** method throws the signal's abort
  /// [AbortSignal.reason] if the signal has been aborted; otherwise it does
  /// nothing.
  ///
  /// An API that needs to support aborting can accept an [AbortSignal] object
  /// and use `throwIfAborted()` to test and throw when the
  /// [`abort`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/abort_event)
  /// event is signalled.
  ///
  /// This method can also be used to abort operations at particular points in
  /// code, rather than passing to functions that take a signal.
  void throwIfAborted() {
    unsupportedPlatformError();
  }

  /// The **`aborted`** read-only property returns a value that indicates
  /// whether the asynchronous operations the signal is communicating with are
  /// aborted (`true`) or not (`false`).
  bool get aborted {
    unsupportedPlatformError();
  }

  /// The **`reason`** read-only property returns a JavaScript value that
  /// indicates the abort reason.
  ///
  /// The property is `undefined` when the signal has not been aborted.
  /// It can be set to a specific value when the signal is aborted, using
  /// [AbortController.abort] or [AbortSignal.abort_static].
  /// If not explicitly set in those methods, it defaults to "AbortError"
  /// [DOMException].
  JSAny? get reason {
    unsupportedPlatformError();
  }

  EventHandler get onabort {
    unsupportedPlatformError();
  }

  set onabort(EventHandler value) {
    unsupportedPlatformError();
  }
}

/// **`NodeList`** objects are collections of
/// [nodes](https://developer.mozilla.org/en-US/docs/Web/API/Node), usually
/// returned by properties such as [Node.childNodes] and methods such as
/// [document.querySelectorAll].
///
/// This interface was an
/// [attempt to create an unmodifiable list](https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156)
/// and only continues to be supported to not break code that's already using
/// it. Modern APIs represent list structures using types based on JavaScript
/// [arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array),
/// thus making many array methods available, and at the same time imposing
/// additional semantics on their usage (such as making their items read-only).
///
/// These historical reasons do not mean that you as a developer should avoid
/// `NodeList`. You don't create `NodeList` objects yourself, but you get them
/// from APIs such as [Document.querySelectorAll], and these APIs are not
/// deprecated. However, be careful of the semantic differences from a real
/// array.
///
/// Although `NodeList` is not an `Array`, it is possible to iterate over it
/// with `forEach()`. It can also be converted to a real `Array` using
/// `Array.from()`.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/NodeList).
extension type NodeList._(JSObject _) implements JSObject {
  /// Returns a node from a
  /// [`NodeList`](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) by
  /// index. This method
  /// doesn't throw exceptions as long as you provide arguments. A value of
  /// `null`
  /// is returned if the index is out of range, and a `TypeError` is thrown if
  /// no
  /// argument is provided.
  Node? item(int index) {
    unsupportedPlatformError();
  }

  /// The **`NodeList.length`** property returns the number of items
  /// in a [NodeList].
  int get length {
    unsupportedPlatformError();
  }
}

/// The **`HTMLCollection`** interface represents a generic collection
/// (array-like object similar to `arguments`) of elements (in document order)
/// and offers methods and properties for selecting from the list.
///
/// An `HTMLCollection` in the HTML DOM is live; it is automatically updated
/// when the underlying document is changed. For this reason it is a good idea
/// to make a copy (e.g., using `Array.from`) to iterate over if adding, moving,
/// or removing nodes.
///
/// This interface is called `HTMLCollection` for historical reasons, because
/// before the modern DOM, collections implementing this interface could only
/// have HTML elements as their items.
///
/// This interface was an
/// [attempt to create an unmodifiable list](https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156)
/// and only continues to be supported to not break code that's already using
/// it. Modern APIs represent list structures using types based on JavaScript
/// [arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array),
/// thus making many array methods available, and at the same time imposing
/// additional semantics on their usage (such as making their items read-only).
///
/// These historical reasons do not mean that you as a developer should avoid
/// `HTMLCollection`. You don't create `HTMLCollection` objects yourself, but
/// you get them from APIs such as [Document.getElementsByClassName], and these
/// APIs are not deprecated. However, be careful of the semantic differences
/// from a real array.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection).
extension type HTMLCollection._(JSObject _) implements JSObject {
  /// The [HTMLCollection] method `item()`
  /// returns the element located at the specified offset into the collection.
  ///
  /// > **Note:** Because the contents of an `HTMLCollection` are
  /// > live, changes to the underlying DOM can and will cause the position of
  /// > individual
  /// > elements in the collection to change, so the index value will not
  /// > necessarily remain
  /// > constant for a given element.
  Element? item(int index) {
    unsupportedPlatformError();
  }

  /// The **`namedItem()`** method of the [HTMLCollection] interface returns
  /// the first [Element] in the collection whose `id` or `name` attribute match
  /// the specified name, or `null` if no element matches.
  ///
  /// In JavaScript, using the array bracket syntax with a `String`, like
  /// `collection["value"]` is equivalent to `collection.namedItem("value")`.
  Element? namedItem(String name) {
    unsupportedPlatformError();
  }

  /// The **`HTMLCollection.length`** property returns the number of
  /// items in a [HTMLCollection].
  int get length {
    unsupportedPlatformError();
  }
}

/// The [MutationObserver] interface provides the ability to watch for changes
/// being made to the
/// [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)
/// tree. It is designed as a replacement for the older
/// [Mutation Events](https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent)
/// feature, which was part of the DOM3 Events specification.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver).
extension type MutationObserver._(JSObject _) implements JSObject {
  factory MutationObserver(MutationCallback callback) {
    unsupportedPlatformError();
  }

  /// The [MutationObserver] method **`observe()`** configures the
  /// `MutationObserver`
  /// callback to begin receiving notifications of changes to the DOM that match
  /// the given options.
  ///
  /// Depending on the configuration, the observer may watch a single [Node] in
  /// the DOM tree, or that node and some or all of its descendant nodes.
  ///
  /// To stop the `MutationObserver` (so that none of its callbacks will be
  /// triggered any longer), call [MutationObserver.disconnect].
  void observe(
    Node target, [
    MutationObserverInit? options,
  ]) {
    unsupportedPlatformError();
  }

  /// The [MutationObserver] method
  /// **`disconnect()`** tells the observer to stop watching for
  /// mutations.
  ///
  /// The observer can be reused by calling its
  /// [MutationObserver.observe] method again.
  void disconnect() {
    unsupportedPlatformError();
  }

  /// The [MutationObserver] method
  /// **`takeRecords()`** returns a list of all matching DOM changes
  /// that have been detected but not yet processed by the observer's callback
  /// function,
  /// leaving the mutation queue empty.
  ///
  /// The most common use case for this is to
  /// immediately fetch all pending mutation records immediately prior to
  /// disconnecting the
  /// observer, so that any pending mutations can be processed when shutting
  /// down the
  /// observer.
  JSArray<MutationRecord> takeRecords() {
    unsupportedPlatformError();
  }
}
extension type MutationObserverInit._(JSObject _) implements JSObject {
  factory MutationObserverInit({
    bool? childList,
    bool? attributes,
    bool? characterData,
    bool? subtree,
    bool? attributeOldValue,
    bool? characterDataOldValue,
    JSArray<JSString>? attributeFilter,
  }) {
    unsupportedPlatformError();
  }

  bool get childList {
    unsupportedPlatformError();
  }

  set childList(bool value) {
    unsupportedPlatformError();
  }

  bool get attributes {
    unsupportedPlatformError();
  }

  set attributes(bool value) {
    unsupportedPlatformError();
  }

  bool get characterData {
    unsupportedPlatformError();
  }

  set characterData(bool value) {
    unsupportedPlatformError();
  }

  bool get subtree {
    unsupportedPlatformError();
  }

  set subtree(bool value) {
    unsupportedPlatformError();
  }

  bool get attributeOldValue {
    unsupportedPlatformError();
  }

  set attributeOldValue(bool value) {
    unsupportedPlatformError();
  }

  bool get characterDataOldValue {
    unsupportedPlatformError();
  }

  set characterDataOldValue(bool value) {
    unsupportedPlatformError();
  }

  JSArray<JSString> get attributeFilter {
    unsupportedPlatformError();
  }

  set attributeFilter(JSArray<JSString> value) {
    unsupportedPlatformError();
  }
}

/// The [MutationRecord] is a read-only interface that represents an individual
/// DOM mutation observed by a [MutationObserver]. It is the object inside the
/// array passed to the callback of a [MutationObserver].
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord).
extension type MutationRecord._(JSObject _) implements JSObject {
  /// The [MutationRecord] read-only property **`type`** is the type of the
  /// [MutationRecord] observed by a [MutationObserver].
  String get type {
    unsupportedPlatformError();
  }

  /// The [MutationRecord] read-only property **`target`** is the target (i.e.
  /// the mutated/changed node) of a mutation observed with a
  /// [MutationObserver].
  Node get target {
    unsupportedPlatformError();
  }

  /// The [MutationRecord] read-only property **`addedNodes`** is a [NodeList]
  /// of nodes added to a target node by a mutation observed with a
  /// [MutationObserver].
  NodeList get addedNodes {
    unsupportedPlatformError();
  }

  /// The [MutationRecord] read-only property **`removedNodes`** is a [NodeList]
  /// of nodes removed from a target node by a mutation observed with a
  /// [MutationObserver].
  NodeList get removedNodes {
    unsupportedPlatformError();
  }

  /// The [MutationRecord] read-only property **`previousSibling`** is the
  /// previous sibling of an added or removed child node of the
  /// [`target`](https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/target)
  /// of a [MutationObserver].
  Node? get previousSibling {
    unsupportedPlatformError();
  }

  /// The [MutationRecord] read-only property **`nextSibling`** is the next
  /// sibling of an added or removed child node of the
  /// [`target`](https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/target)
  /// of a [MutationObserver].
  Node? get nextSibling {
    unsupportedPlatformError();
  }

  /// The [MutationRecord] read-only property **`attributeName`** contains the
  /// name of a changed attribute belonging to a node that is observed by a
  /// [MutationObserver].
  String? get attributeName {
    unsupportedPlatformError();
  }

  /// The [MutationRecord] read-only property **`attributeNamespace`** is the
  /// namespace of the mutated attribute in the [MutationRecord] observed by a
  /// [MutationObserver].
  String? get attributeNamespace {
    unsupportedPlatformError();
  }

  /// The [MutationRecord] read-only property **`oldValue`** contains the
  /// character data or attribute value of an observed node before it was
  /// changed.
  String? get oldValue {
    unsupportedPlatformError();
  }
}

/// The  **`Node`** interface is an abstract base
/// class upon which many other DOM API objects are based, thus letting those
/// object types
/// to be used similarly and often interchangeably. As an abstract class, there
/// is
/// no such thing as a plain `Node` object. All objects that implement
/// `Node` functionality are based on one of its subclasses. Most notable are
/// [Document], [Element], and [DocumentFragment].
///
/// In addition, every kind of DOM node is represented by an interface based on
/// `Node`. These include [Attr], [CharacterData]
/// (which [Text], [Comment], [CDATASection] and
/// [ProcessingInstruction] are all based on), and [DocumentType].
///
/// In some cases, a particular feature of the base `Node` interface may not
/// apply to one of its child interfaces; in that case, the inheriting node may
/// return `null` or throw an exception, depending on circumstances. For
/// example,
/// attempting to add children to a node type that cannot have children will
/// throw an
/// exception.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Node).
extension type Node._(JSObject _) implements EventTarget, JSObject {
  static const int ELEMENT_NODE = 1;

  static const int ATTRIBUTE_NODE = 2;

  static const int TEXT_NODE = 3;

  static const int CDATA_SECTION_NODE = 4;

  static const int ENTITY_REFERENCE_NODE = 5;

  static const int ENTITY_NODE = 6;

  static const int PROCESSING_INSTRUCTION_NODE = 7;

  static const int COMMENT_NODE = 8;

  static const int DOCUMENT_NODE = 9;

  static const int DOCUMENT_TYPE_NODE = 10;

  static const int DOCUMENT_FRAGMENT_NODE = 11;

  static const int NOTATION_NODE = 12;

  static const int DOCUMENT_POSITION_DISCONNECTED = 1;

  static const int DOCUMENT_POSITION_PRECEDING = 2;

  static const int DOCUMENT_POSITION_FOLLOWING = 4;

  static const int DOCUMENT_POSITION_CONTAINS = 8;

  static const int DOCUMENT_POSITION_CONTAINED_BY = 16;

  static const int DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;

  /// The **`getRootNode()`** method of the [Node] interface
  /// returns the context object's root,
  /// which optionally includes the shadow root if it is available.
  Node getRootNode([GetRootNodeOptions? options]) {
    unsupportedPlatformError();
  }

  /// The **`hasChildNodes()`** method of the [Node] interface
  /// returns a boolean value indicating
  /// whether the given [Node] has
  /// [child nodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)
  /// or not.
  bool hasChildNodes() {
    unsupportedPlatformError();
  }

  /// The **`normalize()`** method of the [Node] interface puts the specified
  /// node
  /// and all of its sub-tree into a _normalized_ form.
  /// In a normalized sub-tree, no text nodes in the sub-tree are empty and
  /// there are no adjacent text nodes.
  void normalize() {
    unsupportedPlatformError();
  }

  /// The **`cloneNode()`** method of the [Node] interface
  /// returns a duplicate of the node on which this method was called.
  /// Its parameter controls if the subtree contained in a node is also cloned
  /// or not.
  ///
  /// Cloning a node copies all of its attributes and their values,
  /// including intrinsic (inline) listeners. It does _not_ copy event listeners
  /// added
  /// using
  /// [`addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
  /// or
  /// those assigned to element properties (e.g., `node.onclick =
  /// someFunction`).
  /// Additionally, for a `canvas` element, the painted image is not copied.
  ///
  /// > **Warning:** `cloneNode()` may lead to duplicate element IDs in a
  /// > document!
  /// >
  /// > If the original node has an `id` attribute, and the clone
  /// > will be placed in the same document, then you should modify the clone's
  /// > ID to be
  /// > unique.
  /// >
  /// > Also, `name` attributes may need to be modified,
  /// > depending on whether duplicate names are expected.
  ///
  /// To clone a node to insert into a _different_ document, use
  /// [Document.importNode] instead.
  Node cloneNode([bool? deep]) {
    unsupportedPlatformError();
  }

  /// The **`isEqualNode()`** method of the [Node] interface tests whether two
  /// nodes are equal.
  /// Two nodes are equal when they have the same type, defining characteristics
  /// (for
  /// elements, this would be their ID, number of children, and so forth), its
  /// attributes
  /// match, and so on. The specific set of data points that must match varies
  /// depending on
  /// the types of the nodes.
  bool isEqualNode(Node? otherNode) {
    unsupportedPlatformError();
  }

  /// The **`isSameNode()`** method of the [Node] interface
  /// is a legacy alias the [for the `===` strict equality
  /// operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality).
  /// That is, it tests whether two nodes are the same
  /// (in other words, whether they reference the same object).
  ///
  /// > **Note:** There is no need to use `isSameNode()`; instead use the `===`
  /// > strict equality operator.
  bool isSameNode(Node? otherNode) {
    unsupportedPlatformError();
  }

  /// The **`compareDocumentPosition()`** method of the [Node] interface
  /// reports the position of its argument node relative to the node on which it
  /// is called.
  int compareDocumentPosition(Node other) {
    unsupportedPlatformError();
  }

  /// The **`contains()`** method of the [Node] interface
  /// returns a boolean value indicating
  /// whether a node is a descendant of a given node, that is the node itself,
  /// one of its direct children ([Node.childNodes]),
  /// one of the children's direct children, and so on.
  ///
  /// > **Note:** A node is _contained_ inside itself.
  bool contains(Node? other) {
    unsupportedPlatformError();
  }

  /// The **`lookupPrefix()`** method of the [Node] interface
  /// returns a string containing the prefix for a given namespace URI, if
  /// present,
  /// and `null` if not.
  /// When multiple prefixes are possible, the first prefix is returned.
  String? lookupPrefix(String? namespace) {
    unsupportedPlatformError();
  }

  /// The **`lookupNamespaceURI()`** method of the [Node] interface
  /// takes a prefix as parameter and returns the namespace URI associated with
  /// it on the given node if found (and
  /// `null` if not).
  String? lookupNamespaceURI(String? prefix) {
    unsupportedPlatformError();
  }

  /// The **`isDefaultNamespace()`** method of the [Node] interface accepts a
  /// namespace URI as an argument.
  /// It returns a boolean value that is `true` if the namespace is the default
  /// namespace on the given node and `false` if not.
  ///
  /// > **Note:** The default namespace of an HTML element is always `""`. For a
  /// > SVG element, it is set by the `xmlns` attribute.
  bool isDefaultNamespace(String? namespace) {
    unsupportedPlatformError();
  }

  /// The **`insertBefore()`** method of the [Node] interface
  /// inserts a node before a _reference node_ as a child of a specified _parent
  /// node_.
  ///
  /// If the given node already exists in the document,
  /// `insertBefore()` moves it from its current position to the new position.
  /// (That is, it will automatically be removed from its existing parent
  /// before appending it to the specified new parent.)
  ///
  /// This means that a node cannot be in two locations of the document
  /// simultaneously.
  ///
  /// > **Note:** The [Node.cloneNode] can be used to make a copy
  /// > of the node before appending it under the new parent. Note that the
  /// > copies made with
  /// > `cloneNode()` will not be automatically kept in sync.
  ///
  /// If the given child is a [DocumentFragment], the entire contents of the
  /// `DocumentFragment` are moved into the child list of the specified parent
  /// node.
  Node insertBefore(
    Node node,
    Node? child,
  ) {
    unsupportedPlatformError();
  }

  /// The **`appendChild()`** method of the [Node] interface adds a node to the
  /// end of the list of children of a specified parent node.
  ///
  /// > **Note:** If the given child is a reference to an existing node in the
  /// > document, `appendChild()` moves it from its current position to the new
  /// > position.
  ///
  /// If the given child is a [DocumentFragment], the entire contents of the
  /// [DocumentFragment] are moved into the child list of the specified parent
  /// node.
  ///
  /// `appendChild()` returns the newly appended node, or if the child is a
  /// [DocumentFragment], the emptied fragment.
  ///
  /// > **Note:** Unlike this method, the [Element.append] method supports
  /// > multiple arguments and appending strings. You can prefer using it if
  /// > your node is an element.
  Node appendChild(Node node) {
    unsupportedPlatformError();
  }

  /// The **`replaceChild()`** method of the [Node] interface replaces a child
  /// node within the given (parent) node.
  Node replaceChild(
    Node node,
    Node child,
  ) {
    unsupportedPlatformError();
  }

  /// The **`removeChild()`** method of the [Node] interface
  /// removes a child node from the DOM and returns the removed node.
  ///
  /// > **Note:** As long as a reference is kept on the removed child,
  /// > it still exists in memory, but is no longer part of the DOM.
  /// > It can still be reused later in the code.
  /// >
  /// > If the return value of `removeChild()` is not stored, and no other
  /// > reference is kept,
  /// > it will be
  /// > [automatically deleted](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management)
  /// > from memory after a short time.
  ///
  /// Unlike [Node.cloneNode] the return value preserves the `EventListener`
  /// objects associated with it.
  Node removeChild(Node child) {
    unsupportedPlatformError();
  }

  /// The read-only **`nodeType`** property of a [Node] interface is an integer
  /// that identifies what the node is. It distinguishes different kind of nodes
  /// from each other,
  /// such as [Element], [Text] and [Comment].
  int get nodeType {
    unsupportedPlatformError();
  }

  /// The read-only **`nodeName`** property of [Node] returns the name of the
  /// current node as a string.
  String get nodeName {
    unsupportedPlatformError();
  }

  /// The read-only **`baseURI`** property of the [Node] interface
  /// returns the absolute base URL of the document containing the node.
  ///
  /// The base URL is used to resolve relative URLs when the browser needs to
  /// obtain an absolute URL, for example when processing the HTML `img`
  /// element's `src` attribute or the `xlink:href`  or `href` attributes in
  /// SVG.
  ///
  /// Although this property is read-only, its value is determined by an
  /// algorithm each time
  /// the property is accessed, and may change if the conditions changed.
  ///
  /// The base URL is determined as follows:
  ///
  /// 1. By default, the base URL is the location of the document (as determined
  /// by [window.location]).
  /// 2. If it is an HTML Document and there is a `Base` element in the
  /// document,
  /// the `href` value of the _first_ `Base` element with such an attribute is
  /// used instead.
  String get baseURI {
    unsupportedPlatformError();
  }

  /// The read-only **`isConnected`** property of the [Node] interface
  /// returns a boolean indicating whether the node is connected
  /// (directly or indirectly) to a [Document] object.
  bool get isConnected {
    unsupportedPlatformError();
  }

  /// The read-only **`ownerDocument`** property of the [Node] interface
  /// returns the top-level document object of the node.
  Document? get ownerDocument {
    unsupportedPlatformError();
  }

  /// The read-only **`parentNode`** property of the [Node] interface
  /// returns the parent of the specified node in the DOM tree.
  ///
  /// `Document` and `DocumentFragment`
  /// [nodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType)
  /// can never have a parent, so
  /// `parentNode` will always return `null`.
  /// It also returns `null` if the node has just been created
  /// and is not yet attached to the tree.
  Node? get parentNode {
    unsupportedPlatformError();
  }

  /// The read-only **`parentElement`** property of [Node] interface
  /// returns the DOM node's parent [Element], or `null` if the node either has
  /// no
  /// parent, or its parent isn't a DOM [Element].
  Element? get parentElement {
    unsupportedPlatformError();
  }

  /// The read-only **`childNodes`** property of the [Node] interface returns a
  /// live
  /// [NodeList] of child [Node] of the given element where
  /// the first child node is assigned index `0`. Child nodes include elements,
  /// text and
  /// comments.
  ///
  /// > **Note:** The [NodeList] being live means that its content is changed
  /// > each time
  /// > new children are added or removed.
  /// >
  /// > Browsers insert text nodes into a document to represent whitespace in
  /// > the source markup.
  /// > Therefore a node obtained, for example, using `Node.childNodes[0]`
  /// > may refer to a whitespace text node rather than the actual element the
  /// > author intended to get.
  /// >
  /// > See
  /// > [Whitespace in the DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace)
  /// > for more information.
  ///
  /// The items in the collection of nodes are objects, not strings. To get data
  /// from node
  /// objects, use their properties. For example, to get the name of the first
  /// childNode, you can use `elementNodeReference.childNodes[0].nodeName`.
  ///
  /// The [document] object itself has two children: the Doctype declaration and
  /// the
  /// root element, typically referred to as `documentElement`. In HTML
  /// documents the latter is the `html` element.
  ///
  /// It is important to keep in mind that `childNodes` includes _all_ child
  /// nodes,
  /// including non-element nodes like text and comment.
  /// To get a collection containing only elements, use [Element.children]
  /// instead.
  NodeList get childNodes {
    unsupportedPlatformError();
  }

  /// The read-only **`firstChild`** property of the [Node] interface
  /// returns the node's first child in the tree,
  /// or `null` if the node has no children.
  ///
  /// If the node is a [Document],
  /// this property returns the first node in the list of its direct children.
  ///
  /// > **Note:** This property returns any type of node that is the first child
  /// > of this one.
  /// > It may be a [Text] or a [Comment] node.
  /// > If you want to get the first [Element] that is a child of another
  /// > element,
  /// > consider using [Element.firstElementChild].
  Node? get firstChild {
    unsupportedPlatformError();
  }

  /// The read-only **`lastChild`** property of the [Node] interface
  /// returns the last child of the node, or `null` if there are no child nodes.
  ///
  /// > **Note:** This property returns any type of node that is the last child
  /// > of this one.
  /// > It may be a [Text] or a [Comment] node.
  /// > If you want to get the last [Element] that is a child of another
  /// > element,
  /// > consider using [Element.lastElementChild].
  Node? get lastChild {
    unsupportedPlatformError();
  }

  /// The read-only **`previousSibling`** property of the [Node] interface
  /// returns the node immediately preceding the specified one in its parent's
  /// [Node.childNodes] list,
  /// or `null` if the specified node is the first in that list.
  ///
  /// > **Note:** Browsers insert text nodes into a document to represent
  /// > whitespace in the source markup.
  /// > Therefore a node obtained, for example, using
  /// > [`Node.firstChild`](https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild)
  /// > or `Node.previousSibling`
  /// > may refer to a whitespace text node rather than the actual element the
  /// > author intended to get.
  /// >
  /// > See
  /// > [Whitespace in the DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace)
  /// > for more information.
  /// >
  /// > You can use
  /// > [`previousElementSibling`](https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling)
  /// > to get the previous element node (skipping text nodes and any other
  /// > non-element nodes).
  /// >
  /// > To navigate the opposite way through the child nodes list use
  /// > [Node.nextSibling](https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling).
  Node? get previousSibling {
    unsupportedPlatformError();
  }

  /// The read-only **`nextSibling`** property of the [Node] interface
  /// returns the node immediately following the specified one in their
  /// parent's [Node.childNodes], or returns `null`
  /// if the specified node is the last child in the parent element.
  ///
  /// > **Note:** Browsers insert [Text] nodes into a document to represent
  /// > whitespace in the source markup.
  /// > Therefore a node obtained, for example, using
  /// > [`Node.firstChild`](https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild)
  /// > or
  /// > [`Node.previousSibling`](https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling)
  /// > may refer to a whitespace text node rather than the actual element the
  /// > author
  /// > intended to get.
  /// >
  /// > The article
  /// > [Whitespace in the DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace)
  /// > contains more information about this behavior.
  /// >
  /// > You can use [Element.nextElementSibling] to obtain the next element
  /// > skipping any whitespace nodes, other between-element text, or comments.
  /// >
  /// > To navigate the opposite way through the child nodes list use
  /// > [Node.previousSibling](https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling).
  Node? get nextSibling {
    unsupportedPlatformError();
  }

  /// The **`nodeValue`** property of the [Node] interface returns or sets the
  /// value of the current node.
  String? get nodeValue {
    unsupportedPlatformError();
  }

  set nodeValue(String? value) {
    unsupportedPlatformError();
  }

  /// The **`textContent`** property of the [Node]
  /// interface represents the text content of the node and its descendants.
  ///
  /// > **Note:** `textContent` and [HTMLElement.innerText] are easily confused,
  /// > but the two properties are
  /// > [different in important ways](#differences_from_innertext).
  String? get textContent {
    unsupportedPlatformError();
  }

  set textContent(String? value) {
    unsupportedPlatformError();
  }
}
extension type GetRootNodeOptions._(JSObject _) implements JSObject {
  factory GetRootNodeOptions({bool? composed}) {
    unsupportedPlatformError();
  }

  bool get composed {
    unsupportedPlatformError();
  }

  set composed(bool value) {
    unsupportedPlatformError();
  }
}
Document get document {
  unsupportedPlatformError();
}

/// The **`Document`** interface represents any web page loaded in the browser
/// and serves as an entry point into the web page's content, which is the
/// [DOM tree](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Using_the_Document_Object_Model#what_is_a_dom_tree).
///
/// The DOM tree includes elements such as `body` and `table`, among
/// [many others](https://developer.mozilla.org/en-US/docs/Web/HTML/Element). It
/// provides functionality globally to the document, like how to obtain the
/// page's URL and create new elements in the document.
///
/// The `Document` interface describes the common properties and methods for any
/// kind of document. Depending on the document's type (e.g.
/// [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML),
/// [XML](https://developer.mozilla.org/en-US/docs/Web/XML), SVG, …), a larger
/// API is available: HTML documents, served with the `"text/html"` content
/// type, also implement the [HTMLDocument] interface, whereas XML and SVG
/// documents implement the [XMLDocument] interface.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Document).
extension type Document._(JSObject _) implements Node, JSObject {
  factory Document() {
    unsupportedPlatformError();
  }

  /// The **`parseHTMLUnsafe()`** static method of the [Document] object is used
  /// to parse a string of HTML, which may contain
  /// [declarative shadow roots](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#declarative_shadow_dom),
  /// in order to create a new [Document] instance.
  ///
  /// The suffix "Unsafe" in the method name indicates that, while `<script>`
  /// elements are not evaluated during parsing, the method does not sanitize
  /// other potentially unsafe XSS-relevant input.
  ///
  /// The resulting `Document` will have a
  /// [content type](https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType)
  /// of "text/html", a
  /// [character set](https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet)
  /// of UTF-8, and a URL of "about:blank"
  static Document parseHTMLUnsafe(JSAny html) {
    unsupportedPlatformError();
  }

  /// The **`getElementsByTagName`** method of
  /// [Document] interface returns an
  /// [HTMLCollection] of elements with the given tag name.
  ///
  /// The complete
  /// document is searched, including the root node. The returned
  /// `HTMLCollection`
  /// is live, meaning that it updates itself automatically to stay in sync with
  /// the DOM tree
  /// without having to call `document.getElementsByTagName()` again.
  HTMLCollection getElementsByTagName(String qualifiedName) {
    unsupportedPlatformError();
  }

  /// Returns a list of elements with the given tag name belonging to the given
  /// namespace.
  /// The complete document is searched, including the root node.
  HTMLCollection getElementsByTagNameNS(
    String? namespace,
    String localName,
  ) {
    unsupportedPlatformError();
  }

  /// The **`getElementsByClassName`** method of
  /// [Document] interface returns an array-like object
  /// of all child elements which have all of the given class name(s).
  ///
  /// When called on
  /// the [document] object, the complete document is searched, including the
  /// root node. You may also call [Element.getElementsByClassName] on any
  /// element; it will return only elements which are descendants of the
  /// specified root element with the given class name(s).
  ///
  /// > **Warning:** This is a live [HTMLCollection]. Changes in the DOM will
  /// > reflect in the array as the changes occur. If an element selected by
  /// > this array no
  /// > longer qualifies for the selector, it will automatically be removed. Be
  /// > aware of this
  /// > for iteration purposes.
  HTMLCollection getElementsByClassName(String classNames) {
    unsupportedPlatformError();
  }

  /// In an [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) document,
  /// the **`document.createElement()`** method creates the HTML element
  /// specified by _tagName_, or an [HTMLUnknownElement] if _tagName_ isn't
  /// recognized.
  Element createElement(
    String localName, [
    JSAny? options,
  ]) {
    unsupportedPlatformError();
  }

  /// Creates an element with the specified namespace URI and qualified name.
  ///
  /// To create an element without specifying a namespace URI, use the
  /// [Document.createElement] method.
  Element createElementNS(
    String? namespace,
    String qualifiedName, [
    JSAny? options,
  ]) {
    unsupportedPlatformError();
  }

  /// Creates a new empty [DocumentFragment] into which
  /// DOM nodes can be added to build an offscreen DOM tree.
  DocumentFragment createDocumentFragment() {
    unsupportedPlatformError();
  }

  /// Creates a new [Text] node. This method can be used to escape HTML
  /// characters.
  Text createTextNode(String data) {
    unsupportedPlatformError();
  }

  /// **`createCDATASection()`** creates a new CDATA section node,
  /// and returns it.
  CDATASection createCDATASection(String data) {
    unsupportedPlatformError();
  }

  /// **`createComment()`** creates a new comment node, and returns
  /// it.
  Comment createComment(String data) {
    unsupportedPlatformError();
  }

  /// `createProcessingInstruction()` generates a new
  /// [processing instruction](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction)
  /// node and returns it.
  ///
  /// The new node usually will be inserted into an XML document in order to
  /// accomplish anything with it, such as with [node.insertBefore].
  ProcessingInstruction createProcessingInstruction(
    String target,
    String data,
  ) {
    unsupportedPlatformError();
  }

  /// The [Document] object's **`importNode()`** method creates a copy of a
  /// [Node] or [DocumentFragment] from another document, to be
  /// inserted into the current document later.
  ///
  /// The imported node is not yet included in the document tree. To include it,
  /// you need to
  /// call an insertion method such as [Node.appendChild] or
  /// [Node.insertBefore] with a node that _is_
  /// currently in the document tree.
  ///
  /// Unlike [document.adoptNode], the original node is not removed from its
  /// original document. The imported node is a clone of the original.
  Node importNode(
    Node node, [
    bool? deep,
  ]) {
    unsupportedPlatformError();
  }

  /// **`Document.adoptNode()`** transfers a  from another [Document] into the
  /// method's document.
  /// The adopted node and its subtree are removed from their original document
  /// (if any), and their [Node.ownerDocument] is changed to the current
  /// document.
  /// The node can then be inserted into the current document.
  Node adoptNode(Node node) {
    unsupportedPlatformError();
  }

  /// The **`Document.createAttribute()`** method creates a new
  /// attribute node, and returns it. The object created is a node implementing
  /// the
  /// [Attr] interface. The DOM does not enforce what sort of attributes can be
  /// added to a particular element in this manner.
  ///
  /// > **Note:** The string given in parameter is converted to lowercase.
  Attr createAttribute(String localName) {
    unsupportedPlatformError();
  }

  /// The **`Document.createAttributeNS()`** method creates a new attribute node
  /// with the specified namespace URI and qualified name, and returns it.
  /// The object created is a node implementing the
  /// [Attr] interface. The DOM does not enforce what sort of attributes can be
  /// added to a particular element in this manner.
  Attr createAttributeNS(
    String? namespace,
    String qualifiedName,
  ) {
    unsupportedPlatformError();
  }

  /// > **Warning:** Many methods used with `createEvent`, such as
  /// > `initCustomEvent`, are deprecated.
  /// > Use
  /// > [event constructors](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)
  /// > instead.
  ///
  /// Creates an [event](https://developer.mozilla.org/en-US/docs/Web/API/Event)
  /// of the type specified. The
  /// returned object should be first initialized and can then be passed to
  /// [EventTarget.dispatchEvent].
  Event createEvent(String interface) {
    unsupportedPlatformError();
  }

  /// The **`Document.createRange()`** method returns a new
  /// [Range] object.
  Range createRange() {
    unsupportedPlatformError();
  }

  /// The **`Document.createNodeIterator()`** method returns a new
  /// [`NodeIterator`](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator)
  /// object.
  NodeIterator createNodeIterator(
    Node root, [
    int? whatToShow,
    NodeFilter? filter,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`Document.createTreeWalker()`** creator method returns a newly
  /// created [TreeWalker] object.
  TreeWalker createTreeWalker(
    Node root, [
    int? whatToShow,
    NodeFilter? filter,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`startViewTransition()`** method of the [Document] interface starts
  /// a new same-document (SPA)
  /// [view transition](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API)
  /// and returns a [ViewTransition] object to represent it.
  ///
  /// When `startViewTransition()` is invoked, a sequence of steps is followed
  /// as explained in
  /// [The view transition process](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API/Using#the_view_transition_process).
  ViewTransition startViewTransition([JSObject? callbackOptions]) {
    unsupportedPlatformError();
  }

  /// The **`elementFromPoint()`**
  /// method, available on the [Document] object, returns the topmost [Element]
  /// at the specified coordinates
  /// (relative to the viewport).
  ///
  /// If the element at the specified point belongs to another document (for
  /// example, the
  /// document of an `iframe`), that document's parent element is returned
  /// (the `<iframe>` itself). If the element at the given point is anonymous
  /// or XBL generated content, such as a textbox's scroll bars, then the first
  /// non-anonymous
  /// ancestor element (for example, the textbox) is returned.
  ///
  /// Elements with  set to `none` will be ignored,
  /// and the element below it will be returned.
  ///
  /// If the method is run on another document (like an `<iframe>`'s
  /// subdocument), the coordinates are relative to the document where the
  /// method is being
  /// called.
  ///
  /// If the specified point is outside the visible bounds of the document or
  /// either
  /// coordinate is negative, the result is `null`.
  ///
  /// If you need to find the specific position inside the element, use
  /// [Document.caretPositionFromPoint].
  Element? elementFromPoint(
    num x,
    num y,
  ) {
    unsupportedPlatformError();
  }

  /// The **`elementsFromPoint()`** method
  /// of the [Document] interface returns an array of all elements
  /// at the specified coordinates (relative to the viewport).
  /// The elements are ordered from the topmost to the bottommost box of the
  /// viewport.
  ///
  /// It operates in a similar way to the [Document.elementFromPoint] method.
  JSArray<Element> elementsFromPoint(
    num x,
    num y,
  ) {
    unsupportedPlatformError();
  }

  /// The **`caretPositionFromPoint()`**
  /// method of the [Document] interface returns a
  /// [CaretPosition] object, containing the DOM node, along with the caret and
  /// caret's character offset within that node.
  JSObject? caretPositionFromPoint(
    num x,
    num y, [
    CaretPositionFromPointOptions? options,
  ]) {
    unsupportedPlatformError();
  }

  /// The [Document] method
  /// **`exitFullscreen()`** requests that the element on this
  /// document which is currently being presented in fullscreen mode be taken
  /// out of
  /// fullscreen mode, restoring the previous state of the screen. This usually
  /// reverses the effects of a previous call to [Element.requestFullscreen].
  JSPromise<JSAny?> exitFullscreen() {
    unsupportedPlatformError();
  }

  JSObject operator [](String name) {
    unsupportedPlatformError();
  }

  /// The **`getElementsByName()`** method
  /// of the [Document] object returns a [NodeList] Collection of
  /// elements with a given `name` attribute in the document.
  NodeList getElementsByName(String elementName) {
    unsupportedPlatformError();
  }

  /// The **`Document.open()`** method opens a document for
  /// [Document.write].
  ///
  /// This does come with some side effects. For example:
  ///
  /// - All event listeners currently registered on the document, nodes inside
  ///   the document,
  /// or the document's window are removed.
  /// - All existing nodes are removed from the document.
  JSObject? open([
    String? unused1OrUrl,
    String? nameOrUnused2,
    String? features,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`Document.close()`** method finishes writing to a
  /// document, opened with [Document.open].
  void close() {
    unsupportedPlatformError();
  }

  /// > **Warning:** Use of the `document.write()` method is strongly
  /// > discouraged.
  /// >
  /// > As
  /// > [the HTML spec itself warns](<https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#document.write()>):
  /// >
  /// > > This method has very idiosyncratic behavior. In some cases, this
  /// > method can affect the state of the
  /// > [HTML parser](https://html.spec.whatwg.org/multipage/parsing.html#html-parser)
  /// > while the parser is running, resulting in a DOM that does not correspond
  /// > to the source of the document (e.g. if the string written is the string
  /// > "`<plaintext>`" or "`<!--`"). In other cases, the call can clear the
  /// > current page first, as if
  /// > [`document.open()`](https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-document-open)
  /// > had been called. In yet more cases, the method is simply ignored, or
  /// > throws an exception. Users agents are
  /// > [explicitly allowed to avoid executing `script` elements inserted via this method](https://html.spec.whatwg.org/multipage/parsing.html#document-written-scripts-intervention).
  /// > And to make matters even worse, the exact behavior of this method can in
  /// > some cases be dependent on network latency, which can lead to failures
  /// > that are very hard to debug. For all these reasons, use of this method
  /// > is strongly discouraged.
  /// > > Therefore, avoid using `document.write()` — and if possible, update
  /// > any existing code that is still using it.
  ///
  /// The **`document.write()`** method writes a string of text to a document
  /// stream opened by [document.open].
  ///
  /// > **Note:** Because `document.write()` writes to the document **stream**,
  /// > calling `document.write()` on a closed (loaded) document automatically
  /// > calls `document.open()`,
  /// > [which will clear the document](https://developer.mozilla.org/en-US/docs/Web/API/Document/open#notes).
  void write(JSAny text) {
    unsupportedPlatformError();
  }

  /// > **Warning:** Use of the `document.writeln()` method is strongly
  /// > discouraged.
  /// >
  /// > As
  /// > [the HTML spec itself warns](<https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#document.write()>):
  /// >
  /// > > This method has very idiosyncratic behavior. In some cases, this
  /// > method can affect the state of the
  /// > [HTML parser](https://html.spec.whatwg.org/multipage/parsing.html#html-parser)
  /// > while the parser is running, resulting in a DOM that does not correspond
  /// > to the source of the document (e.g. if the string written is the string
  /// > "`<plaintext>`" or "`<!--`"). In other cases, the call can clear the
  /// > current page first, as if
  /// > [`document.open()`](https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-document-open)
  /// > had been called. In yet more cases, the method is simply ignored, or
  /// > throws an exception. Users agents are
  /// > [explicitly allowed to avoid executing `script` elements inserted via this method](https://html.spec.whatwg.org/multipage/parsing.html#document-written-scripts-intervention).
  /// > And to make matters even worse, the exact behavior of this method can in
  /// > some cases be dependent on network latency, which can lead to failures
  /// > that are very hard to debug. For all these reasons, use of this method
  /// > is strongly discouraged.
  /// > > Therefore, avoid using `document.writeln()` — and if possible, update
  /// > any existing code that is still using it.
  ///
  /// Writes a string of text followed by a newline character to a document.
  void writeln(JSAny text) {
    unsupportedPlatformError();
  }

  /// The **`hasFocus()`** method of the [Document] interface returns a boolean
  /// value indicating whether the document or any element inside the document
  /// has focus.
  /// This method can be used to determine whether the active element in a
  /// document has focus.
  ///
  /// > **Note:** When viewing a document, an element with focus is always the
  /// > [active element](https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement)
  /// > in the document, but an active element does not necessarily have focus.
  /// > For example, an active element within a popup window that is not the
  /// > foreground doesn't have focus.
  bool hasFocus() {
    unsupportedPlatformError();
  }

  /// The **`execCommand`** method implements multiple different commands. Some
  /// of them provide access to the clipboard, while others are for editing
  /// [form inputs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input),
  /// [`contenteditable`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable)
  /// elements or entire documents (when switched to
  /// [design mode](https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode)).
  ///
  /// To access the clipboard, the newer
  /// [Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API)
  /// is recommended over `execCommand()`. However, there is no replacement for
  /// the editing commands: unlike direct DOM manipulation, modifications
  /// performed by `execCommand()` preserve the undo buffer (edit history).
  ///
  /// Most commands affect the document's
  /// [selection](https://developer.mozilla.org/en-US/docs/Web/API/Selection).
  /// For example, some commands (bold, italics, etc.) format the currently
  /// selected text, while others delete the selection, insert new elements
  /// (replacing the selection) or affect an entire line (indenting). Only the
  /// currently active editable element can be modified, but some commands (e.g.
  /// `copy`) can work without an editable element.
  ///
  /// > **Note:** Modifications performed by `execCommand()` may or may not
  /// > trigger [Element.beforeinput_event] and [Element.input_event] events,
  /// > depending on the browser and configuration. If triggered, the handlers
  /// > for the events will run before `execCommand()` returns. Authors need to
  /// > be careful about such recursive calls, especially if they call
  /// > `execCommand()` in response to these events. From Firefox 82, nested
  /// > `execCommand()` calls will always fail, see
  /// > [bug 1634262](https://bugzil.la/1634262).
  bool execCommand(
    String commandId, [
    bool? showUI,
    String? value,
  ]) {
    unsupportedPlatformError();
  }

  bool queryCommandIndeterm(String commandId) {
    unsupportedPlatformError();
  }

  String queryCommandValue(String commandId) {
    unsupportedPlatformError();
  }

  /// The **`Document.clear()`** method does nothing, but doesn't raise any
  /// error.
  void clear() {
    unsupportedPlatformError();
  }

  void captureEvents() {
    unsupportedPlatformError();
  }

  void releaseEvents() {
    unsupportedPlatformError();
  }

  /// The **`exitPictureInPicture()`** method of the [Document] interface
  /// requests that a video contained
  /// in this document, which is currently floating, be taken out of
  /// picture-in-picture
  /// mode, restoring the previous state of the screen. This usually reverses
  /// the
  /// effects of a previous call to [HTMLVideoElement.requestPictureInPicture].
  JSPromise<JSAny?> exitPictureInPicture() {
    unsupportedPlatformError();
  }

  /// The **`exitPointerLock()`** method of the [Document] interface
  /// asynchronously releases a pointer lock previously requested through
  /// [Element.requestPointerLock].
  ///
  /// > **Note:** While the **`exitPointerLock()`** method is called on the
  /// > document, the **`requestPointerLock()`** method is called on an element.
  ///
  /// To track the success or failure of the request, it is necessary to listen
  /// for the [Document.pointerlockchange_event] and
  /// [Document.pointerlockerror_event] events.
  void exitPointerLock() {
    unsupportedPlatformError();
  }

  /// The **`hasUnpartitionedCookieAccess()`** method of the [Document]
  /// interface returns a `Promise` that resolves with a boolean value
  /// indicating whether the document has access to
  /// [third-party](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#third-party_cookies),
  /// [unpartitioned](https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API#unpartitioned_versus_partitioned_cookies)
  /// cookies.
  ///
  /// This method is part of the
  /// [Storage Access API](https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API).
  ///
  /// This method is a new name for [Document.hasStorageAccess].
  JSPromise<JSBoolean> hasUnpartitionedCookieAccess() {
    unsupportedPlatformError();
  }

  /// The **`getSelection()`** method of
  /// the [Document] interface returns a [Selection]
  /// object representing the range of text selected by the user, or the current
  /// position of
  /// the caret.
  Selection? getSelection() {
    unsupportedPlatformError();
  }

  /// The **`hasStorageAccess()`** method of the [Document] interface returns a
  /// `Promise` that resolves with a boolean value indicating whether the
  /// document has access to
  /// [third-party](https://developer.mozilla.org/en-US/docs/Web/Privacy/Third-party_cookies),
  /// [unpartitioned](https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API#unpartitioned_versus_partitioned_cookies)
  /// cookies.
  ///
  /// This method is part of the
  /// [Storage Access API](https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API).
  ///
  /// > **Note:** This method is another name for
  /// > [Document.hasUnpartitionedCookieAccess]. There are no current plans to
  /// > remove this method in favor of [Document.hasUnpartitionedCookieAccess].
  JSPromise<JSBoolean> hasStorageAccess() {
    unsupportedPlatformError();
  }

  /// The **`requestStorageAccess()`** method of the [Document] interface allows
  /// content loaded in a third-party context (i.e., embedded in an `iframe`) to
  /// request access to
  /// [third-party cookies](https://developer.mozilla.org/en-US/docs/Web/Privacy/Third-party_cookies)
  /// and
  /// [unpartitioned state](https://developer.mozilla.org/en-US/docs/Web/Privacy/State_Partitioning#state_partitioning).
  /// This is relevant to user agents that, by default, block access to
  /// third-party,
  /// [unpartitioned](https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API#unpartitioned_versus_partitioned_cookies)
  /// cookies to improve privacy (e.g., to prevent tracking), and is part of the
  /// [Storage Access API](https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API).
  ///
  /// To check whether permission to access third-party cookies has already been
  /// granted, you can call [Permissions.query], specifying the feature name
  /// `"storage-access"`.
  ///
  /// > **Note:** Usage of this feature may be blocked by a
  /// > [Permissions Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Permissions_Policy)
  /// > set on your server. In addition, the document must pass additional
  /// > browser-specific checks such as allowlists, blocklists, on-device
  /// > classification, user settings,
  /// > anti-[clickjacking](https://developer.mozilla.org/en-US/docs/Glossary/Clickjacking)
  /// > heuristics, or prompting the user for explicit permission.
  JSPromise<JSAny?> requestStorageAccess() {
    unsupportedPlatformError();
  }

  /// The **`getElementById()`** method of the [Document] interface returns an
  /// [Element] object representing the element whose [Element.id] property
  /// matches the specified string. Since element IDs are required to be unique
  /// if specified, they're a useful way to get access to a specific element
  /// quickly.
  ///
  /// If you need to get access to an element which doesn't have an ID, you can
  /// use [Document.querySelector] to find the element using any .
  ///
  /// > **Note:** IDs should be unique inside a document. If two or more
  /// > elements in a document have the same ID, this method returns the first
  /// > element found.
  Element? getElementById(String elementId) {
    unsupportedPlatformError();
  }

  /// The `getAnimations()` method of the [Document] interface
  /// returns an array of all [Animation] objects currently in effect whose
  /// target elements are descendants of the document. This array includes
  /// [CSS Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations),
  /// [CSS Transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions),
  /// and
  /// [Web Animations](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API).
  JSArray<Animation> getAnimations() {
    unsupportedPlatformError();
  }

  /// The **`Document.prepend()`** method
  /// inserts a set of [Node] objects or string objects before
  /// the first child of the document. String objects
  /// are inserted as equivalent [Text] nodes.
  ///
  /// This method prepends a child to a `Document`. To prepend to an arbitrary
  /// element in the tree, see [Element.prepend].
  void prepend(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`Document.append()`** method
  /// inserts a set of [Node] objects or string objects after
  /// the last child of the document. String objects
  /// are inserted as equivalent [Text] nodes.
  ///
  /// This method appends a child to a `Document`. To append to an arbitrary
  /// element in the tree, see [Element.append].
  void append(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`Document.replaceChildren()`** method replaces the
  /// existing children of a `Document` with a specified new set of children.
  void replaceChildren(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The [Document] method **`querySelector()`**
  /// returns the first [Element] within the document that matches the specified
  /// selector, or group of selectors. If no matches are found, `null` is
  /// returned.
  ///
  /// > **Note:** The matching is done using depth-first pre-order traversal of
  /// > the document's nodes starting with the first element in the document's
  /// > markup and
  /// > iterating through sequential nodes by order of the number of child
  /// > nodes.
  Element? querySelector(String selectors) {
    unsupportedPlatformError();
  }

  /// The [Document] method **`querySelectorAll()`**
  /// returns a static (not live) [NodeList] representing a list of the
  /// document's elements that match the specified group of selectors.
  NodeList querySelectorAll(String selectors) {
    unsupportedPlatformError();
  }

  /// This method compiles an [XPathExpression] which can then be used for
  /// (repeated) evaluations.
  ///
  /// You must call this method on the same document that you run the expression
  /// against.
  XPathExpression createExpression(
    String expression, [
    XPathNSResolver? resolver,
  ]) {
    unsupportedPlatformError();
  }

  /// Creates an `XPathNSResolver` which resolves namespaces with respect to the
  /// definitions in scope for a specified node.
  Node createNSResolver(Node nodeResolver) {
    unsupportedPlatformError();
  }

  /// The **`evaluate()`** method of the [Document] interface selects elements
  /// based on the [XPath](https://developer.mozilla.org/en-US/docs/Web/XPath)
  /// expression given in parameters.
  ///
  /// XPath expressions can be evaluated on both HTML and XML documents.
  XPathResult evaluate(
    String expression,
    Node contextNode, [
    XPathNSResolver? resolver,
    int? type,
    XPathResult? result,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`Document.implementation`** property returns a
  /// [DOMImplementation] object associated with the current document.
  DOMImplementation get implementation {
    unsupportedPlatformError();
  }

  /// The **`URL`** read-only property of the [Document]
  /// interface returns the document location as a string.
  String get URL {
    unsupportedPlatformError();
  }

  /// The **`documentURI`** read-only property of the
  /// [Document] interface returns the document location as a string.
  String get documentURI {
    unsupportedPlatformError();
  }

  /// The **`Document.compatMode`** read-only property indicates
  /// whether the document is rendered in
  /// [Quirks mode](https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode)
  /// or
  /// Standards mode.
  String get compatMode {
    unsupportedPlatformError();
  }

  /// The **`Document.characterSet`**
  /// read-only property returns the
  /// [character encoding](https://developer.mozilla.org/en-US/docs/Glossary/Character_encoding)
  /// of the
  /// document that it's currently rendered with.
  ///
  /// > **Note:** A "character set" and a "character encoding" are related, but
  /// > different. Despite the
  /// > name of this property, it returns the _encoding_.
  String get characterSet {
    unsupportedPlatformError();
  }

  /// The **`Document.contentType`** read-only property returns the
  /// MIME type that the document is being rendered as. This may come from HTTP
  /// headers or
  /// other sources of MIME information, and might be affected by automatic type
  /// conversions
  /// performed by either the browser or extensions.
  ///
  /// > **Note:** This property is unaffected by `meta`
  /// > elements.
  String get contentType {
    unsupportedPlatformError();
  }

  /// The **`doctype`** read-only property of the [Document] interface is a
  /// [DocumentType] object representing the the  associated with the current
  /// document.
  DocumentType? get doctype {
    unsupportedPlatformError();
  }

  /// The **`documentElement`** read-only property of the [Document] interface
  /// returns the
  /// [Element] that is the root element of the [document] (for
  /// example, the `html` element for HTML documents).
  Element? get documentElement {
    unsupportedPlatformError();
  }

  /// **`Document.rootElement`** returns the [Element]
  /// that is the root element of the [document] if it is an
  /// element, otherwise `null`. It is deprecated in favor of
  /// [Document.documentElement], which returns the root element for all
  /// documents.
  SVGSVGElement? get rootElement {
    unsupportedPlatformError();
  }

  /// The **`scrollingElement`** read-only property of the
  /// [Document] interface returns a reference to the [Element] that
  /// scrolls the document. In standards mode, this is the root element of the
  /// document, [document.documentElement].
  ///
  /// When in quirks mode, the `scrollingElement` attribute returns the HTML
  /// `body` element if it exists and is
  /// [potentially scrollable](https://drafts.csswg.org/cssom-view/#potentially-scrollable),
  /// otherwise it returns null.
  Element? get scrollingElement {
    unsupportedPlatformError();
  }

  /// The read-only **`fullscreenEnabled`**
  /// property on the [Document] interface indicates whether or not fullscreen
  /// mode is available.
  ///
  /// fullscreen mode is available only for a page that has no
  /// windowed plug-ins in any of its documents, and if all `iframe` elements
  /// which contain the document have their
  /// [`allowfullscreen`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#allowfullscreen)
  /// attribute set.
  ///
  /// Although this property is read-only, it will not throw if it is modified
  /// (even in
  /// strict mode); the setter is a no-operation and it will be ignored.
  bool get fullscreenEnabled {
    unsupportedPlatformError();
  }

  /// The obsolete [Document] interface's **`fullscreen`** read-only property
  /// reports whether or not the document is currently displaying content in
  /// fullscreen mode.
  ///
  /// Although this property is read-only, it will not throw if it is modified
  /// (even in strict mode); the setter is a no-operation and it will be
  /// ignored.
  ///
  /// > **Note:** Since this property is deprecated, you can determine if
  /// > fullscreen mode is active on the document by checking to see if
  /// > [Document.fullscreenElement] is not `null`.
  bool get fullscreen {
    unsupportedPlatformError();
  }

  EventHandler get onfullscreenchange {
    unsupportedPlatformError();
  }

  set onfullscreenchange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onfullscreenerror {
    unsupportedPlatformError();
  }

  set onfullscreenerror(EventHandler value) {
    unsupportedPlatformError();
  }

  /// The **`Document.location`** read-only property returns a
  /// [Location] object, which contains information about the URL of the
  /// document
  /// and provides methods for changing that URL and loading another URL.
  ///
  /// Though `Document.location` is a _read-only_ `Location`
  /// object, you can also assign a string to it. This means that you can
  /// work with document.location as if it were a string in most cases:
  /// `document.location = 'http://www.example.com'` is a synonym of
  /// `document.location.href = 'http://www.example.com'`. If you assign another
  /// string to it, browser will load the website you assigned.
  ///
  /// To retrieve just the URL as a string, the read-only [document.URL]
  /// property can also be used.
  ///
  /// If the current document is not in a browsing context, the returned value
  /// is
  /// `null`.
  Location? get location {
    unsupportedPlatformError();
  }

  /// The **`domain`** property of the [Document]
  /// interface gets/sets the domain portion of the  of the current
  /// document, as used by the
  /// [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).
  String get domain {
    unsupportedPlatformError();
  }

  set domain(String value) {
    unsupportedPlatformError();
  }

  /// The **`Document.referrer`** property returns the
  /// [URI](https://www.w3.org/Addressing/#background) of the page that linked
  /// to
  /// this page.
  String get referrer {
    unsupportedPlatformError();
  }

  /// The [Document] property `cookie` lets you read and write
  /// [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)
  /// associated with the document.
  /// It serves as a getter and setter for the actual values of the cookies.
  String get cookie {
    unsupportedPlatformError();
  }

  set cookie(String value) {
    unsupportedPlatformError();
  }

  /// The **`lastModified`** property of the [Document]
  /// interface returns a string containing the date and local time on which the
  /// current document
  /// was last modified.
  String get lastModified {
    unsupportedPlatformError();
  }

  /// The **`Document.readyState`** property describes the loading state of the
  /// [document].
  /// When the value of this property changes, a
  /// [Document.readystatechange_event] event fires on the [document] object.
  DocumentReadyState get readyState {
    unsupportedPlatformError();
  }

  /// The **`document.title`** property gets or sets the current title of the
  /// document.
  /// When present, it defaults to the value of the
  /// [`<title>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title).
  String get title {
    unsupportedPlatformError();
  }

  set title(String value) {
    unsupportedPlatformError();
  }

  /// The **`Document.dir`** property is a string
  /// representing the directionality of the text of the document, whether left
  /// to right
  /// (default) or right to left. Possible values are `'rtl'`, right to left,
  /// and
  /// `'ltr'`, left to right.
  String get dir {
    unsupportedPlatformError();
  }

  set dir(String value) {
    unsupportedPlatformError();
  }

  /// The **`Document.body`** property represents the
  /// `body` or `frameset` node of the current document, or
  /// `null` if no such element exists.
  HTMLElement? get body {
    unsupportedPlatformError();
  }

  set body(HTMLElement? value) {
    unsupportedPlatformError();
  }

  /// The **`head`** read-only property of
  /// the [Document] interface returns the `head` element of
  /// the current document.
  HTMLHeadElement? get head {
    unsupportedPlatformError();
  }

  /// The **`images`** read-only property of the [Document] interface returns a
  /// [collection](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection)
  /// of the
  /// [images](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement)
  /// in the current HTML document.
  HTMLCollection get images {
    unsupportedPlatformError();
  }

  /// The **`embeds`** read-only property of the
  /// [Document] interface returns a list of the embedded
  /// `embed` elements within the current document.
  HTMLCollection get embeds {
    unsupportedPlatformError();
  }

  /// The **`plugins`** read-only property of the
  /// [Document] interface returns an [HTMLCollection] object
  /// containing one or more [HTMLEmbedElement]s representing the
  /// `embed` elements in the current document.
  ///
  /// > **Note:** For a list of installed plugins, use
  /// > [Navigator.plugins](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/plugins)
  /// > instead.
  HTMLCollection get plugins {
    unsupportedPlatformError();
  }

  /// The **`links`** read-only property of the [Document] interface returns a
  /// collection of all `area` elements and `a` elements in a document with a
  /// value for the
  /// [href](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href)
  /// attribute.
  HTMLCollection get links {
    unsupportedPlatformError();
  }

  /// The **`forms`** read-only property of
  /// the [Document] interface returns an [HTMLCollection] listing
  /// all the `form` elements contained in the document.
  ///
  /// > **Note:** Similarly, you can access a list of a form's component user
  /// > input elements using the [HTMLFormElement.elements] property.
  HTMLCollection get forms {
    unsupportedPlatformError();
  }

  /// The **`scripts`** property of the [Document]
  /// interface returns a list of the `script`
  /// elements in the document. The returned object is an
  /// [HTMLCollection].
  HTMLCollection get scripts {
    unsupportedPlatformError();
  }

  /// The **`Document.currentScript`** property returns the `script` element
  /// whose script is currently being processed and [isn't a JavaScript
  /// module](https://github.com/whatwg/html/issues/997). (For modules use
  /// [`import.meta`](/en-US/docs/Web/JavaScript/Reference/Operators/import.meta)
  /// instead.)
  ///
  /// It's important to note that this will not reference the `script`
  /// element if the code in the script is being called as a callback or event
  /// handler; it
  /// will only reference the element while it's initially being processed.
  HTMLOrSVGScriptElement? get currentScript {
    unsupportedPlatformError();
  }

  /// In browsers, **`document.defaultView`** returns the
  /// [Window] object associated with , or `null` if none is available.
  ///
  /// This property is read-only.
  Window? get defaultView {
    unsupportedPlatformError();
  }

  /// **`document.designMode`** controls whether the entire document
  /// is editable. Valid values are `"on"` and `"off"`. According to the
  /// specification, this property is meant to default to `"off"`. Firefox
  /// follows
  /// this standard. The earlier versions of Chrome and IE default to
  /// `"inherit"`.
  /// Starting in Chrome 43, the default is `"off"` and `"inherit"` is
  /// no longer supported. In IE6-10, the value is capitalized.
  String get designMode {
    unsupportedPlatformError();
  }

  set designMode(String value) {
    unsupportedPlatformError();
  }

  /// The **`Document.hidden`** read-only property returns a Boolean
  /// value indicating if the page is considered hidden or not.
  ///
  /// The [Document.visibilityState] property provides an alternative way to
  /// determine whether the page is hidden.
  bool get hidden {
    unsupportedPlatformError();
  }

  /// The **`Document.visibilityState`**
  /// read-only property returns the visibility of the document. It can be used
  /// to check whether the document is in the background or in a minimized
  /// window, or is otherwise not visible to the user.
  ///
  /// When the value of this property changes, the
  /// [Document.visibilitychange_event] event is sent to the [Document].
  ///
  /// The [Document.hidden] property provides an alternative way to determine
  /// whether the page is hidden.
  DocumentVisibilityState get visibilityState {
    unsupportedPlatformError();
  }

  EventHandler get onreadystatechange {
    unsupportedPlatformError();
  }

  set onreadystatechange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onvisibilitychange {
    unsupportedPlatformError();
  }

  set onvisibilitychange(EventHandler value) {
    unsupportedPlatformError();
  }

  /// **`fgColor`** gets/sets the foreground color, or text color, of
  /// the current document.
  String get fgColor {
    unsupportedPlatformError();
  }

  set fgColor(String value) {
    unsupportedPlatformError();
  }

  /// The **`Document.linkColor`** property gets/sets the color of
  /// links within the document.
  ///
  /// This property is deprecated. As an alternative, you can set the CSS
  /// `color` property on either HTML anchor links (`a`) or on
  /// pseudo-classes. Another alternative is
  /// `document.body.link`, although this is [deprecated in HTML
  /// 4.01](https://www.w3.org/TR/html401/struct/global.html#adef-link).
  String get linkColor {
    unsupportedPlatformError();
  }

  set linkColor(String value) {
    unsupportedPlatformError();
  }

  /// The **`Document.vlinkColor`** property gets/sets the color of
  /// links that the user has visited in the document.
  String get vlinkColor {
    unsupportedPlatformError();
  }

  set vlinkColor(String value) {
    unsupportedPlatformError();
  }

  /// Returns or sets the color of an active link in the document body. A link
  /// is active
  /// during the time between `mousedown` and `mouseup` events.
  String get alinkColor {
    unsupportedPlatformError();
  }

  set alinkColor(String value) {
    unsupportedPlatformError();
  }

  /// The deprecated `bgColor` property gets or sets the background color of the
  /// current document.
  String get bgColor {
    unsupportedPlatformError();
  }

  set bgColor(String value) {
    unsupportedPlatformError();
  }

  /// The **`anchors`** read-only property of the
  /// [Document] interface returns a list of all of the anchors in the document.
  HTMLCollection get anchors {
    unsupportedPlatformError();
  }

  /// The **`applets`** property of the [Document] returns an empty
  /// [HTMLCollection]. This property is kept only for compatibility reasons; in
  /// older versions of browsers, it returned a list of the applets within a
  /// document.
  ///
  /// > **Note:** Support for the `<applet>` element has been removed by all
  /// > browsers. Therefore, calling `document.applets` always
  /// > returns an empty collection.
  HTMLCollection get applets {
    unsupportedPlatformError();
  }

  /// The [Document] interface's read-only **`all`** property returns an
  /// [HTMLAllCollection] rooted at the document node.
  ///
  /// Rather than using `document.all` to return an [HTMLAllCollection] of all
  /// the document's elements in document order, you can use
  /// [Document.querySelectorAll] to return a [NodeList] of all the document's
  /// elements in document order:
  ///
  /// ```js
  /// const allElements = document.querySelectorAll("*");
  /// ```
  HTMLAllCollection get all {
    unsupportedPlatformError();
  }

  /// The read-only
  /// **`pictureInPictureEnabled`** property of the
  /// [Document] interface indicates whether or not picture-in-picture mode is
  /// available.
  ///
  /// Picture-in-Picture mode is available by default unless specified
  /// otherwise by a
  /// [Permissions-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/picture-in-picture).
  ///
  /// Although this property is read-only, it will not throw if it is modified
  /// (even in
  /// strict mode); the setter is a no-operation and will be ignored.
  bool get pictureInPictureEnabled {
    unsupportedPlatformError();
  }

  EventHandler get onpointerlockchange {
    unsupportedPlatformError();
  }

  set onpointerlockchange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpointerlockerror {
    unsupportedPlatformError();
  }

  set onpointerlockerror(EventHandler value) {
    unsupportedPlatformError();
  }

  /// The `timeline` readonly property of the [Document] interface represents
  /// the default timeline of the current document. This timeline is a special
  /// instance of [DocumentTimeline].
  ///
  /// This timeline is unique to each `document` and persists for the lifetime
  /// of the `document` including calls to [Document.open].
  ///
  /// This timeline expresses the time in milliseconds since
  /// [Performance.timeOrigin].
  /// Prior to the time origin, the timeline is inactive, and its
  /// [AnimationTimeline.currentTime] is `null`.
  ///
  /// > **Note:** A document timeline that is associated with a non-active
  /// > document (a [Document] not associated with a [Window], `iframe`, or
  /// > `frame`) is also considered to be inactive.
  DocumentTimeline get timeline {
    unsupportedPlatformError();
  }

  /// The **`fonts`** property of the [Document] interface returns the
  /// [FontFaceSet] interface of the document.
  ///
  /// This feature is part of the
  /// [CSS Font Loading API](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API).
  FontFaceSet get fonts {
    unsupportedPlatformError();
  }

  /// The **`styleSheets`** read-only property of the [Document] interface
  /// returns a [StyleSheetList] of [CSSStyleSheet] objects, for stylesheets
  /// explicitly linked into or embedded in a document.
  StyleSheetList get styleSheets {
    unsupportedPlatformError();
  }

  /// The **`adoptedStyleSheets`** property of the [Document] interface is used
  /// for setting an array of constructed stylesheets to be used by the
  /// document.
  ///
  /// > **Note:** A constructed stylesheet is a stylesheet created
  /// > programmatically using the [`CSSStyleSheet()`
  /// > constructor](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/CSSStyleSheet)
  /// > (as compared to one created by a user-agent when importing a stylesheet
  /// > from a script, imported using `style` and , or linked to via `link`).
  ///
  /// The same constructed stylesheets can also be shared with one or more
  /// [ShadowRoot] instances using the
  /// [`ShadowRoot.adoptedStyleSheets`](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/adoptedStyleSheets)
  /// property.
  /// Changing an adopted stylesheet will affect all the objects that adopt it.
  ///
  /// Stylesheets in the property are evaluated along with the document's other
  /// stylesheets using the
  /// [CSS cascade algorithm](https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade).
  /// Where the resolution of rules considers stylesheet order,
  /// `adoptedStyleSheets` are assumed to be ordered after those in
  /// [`Document.styleSheets`](https://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheets).
  ///
  /// Only stylesheets created using the [`CSSStyleSheet()`
  /// constructor](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/CSSStyleSheet)
  /// within the context of the current [Document] may be adopted.
  JSArray<CSSStyleSheet> get adoptedStyleSheets {
    unsupportedPlatformError();
  }

  set adoptedStyleSheets(JSArray<CSSStyleSheet> value) {
    unsupportedPlatformError();
  }

  /// The
  /// **`Document.fullscreenElement`** read-only
  /// property returns the [Element] that is currently being presented in
  /// fullscreen mode in this document, or `null` if fullscreen mode is not
  /// currently in use.
  ///
  /// Although this property is read-only, it will not throw if it is modified
  /// (even in
  /// strict mode); the setter is a no-operation and it will be ignored.
  Element? get fullscreenElement {
    unsupportedPlatformError();
  }

  /// The **`activeElement`** read-only property
  /// of the [Document] interface returns the [Element] within the DOM that
  /// currently has focus.
  ///
  /// Often `activeElement` will return a [HTMLInputElement] or
  /// [HTMLTextAreaElement] object if it has the text selection at the time. If
  /// so, you can get more detail by using the object's `selectionStart` and
  /// `selectionEnd` properties.
  /// Other times the focused element might be a `select` element (menu) or
  /// an `input` element.
  ///
  /// Typically a user can press the tab key to move the focus around the page
  /// among
  /// focusable elements, and use the space bar to activate one (that is, to
  /// press a button or
  /// toggle a radio button). Which elements are focusable varies depending on
  /// the platform
  /// and the browser's current configuration. For example, on macOS systems,
  /// elements that
  /// aren't text input elements are not typically focusable by default.
  ///
  /// > **Note:** Focus (which element is receiving user input events) is not
  /// > the same thing as selection (the currently highlighted part of the
  /// > document). You can
  /// > get the current selection using [window.getSelection].
  Element? get activeElement {
    unsupportedPlatformError();
  }

  /// The read-only **`pictureInPictureElement`** property of the [Document]
  /// interface returns the [Element] that is currently being
  /// presented in picture-in-picture mode in this document, or `null` if
  /// picture-in-picture mode is not currently in use.
  ///
  /// Although this property is read-only, it will not throw if it is modified
  /// (even in
  /// strict mode); the setter is a no-operation and will be ignored.
  Element? get pictureInPictureElement {
    unsupportedPlatformError();
  }

  /// The **`pointerLockElement`** read-only property of the [Document]
  /// interface provides the element set as the target for mouse events while
  /// the pointer is locked.
  /// It is `null` if lock is pending, pointer is unlocked, or the target is in
  /// another document.
  Element? get pointerLockElement {
    unsupportedPlatformError();
  }

  /// The read-only **`children`** property returns a live [HTMLCollection]
  /// which contains all of the child [Element] of the document upon which it
  /// was called.
  ///
  /// For HTML documents, this is usually only the root `<html>` element.
  ///
  /// See [Element.children] for child elements of specific HTML elements within
  /// the document.
  HTMLCollection get children {
    unsupportedPlatformError();
  }

  /// The **`Document.firstElementChild`** read-only property
  /// returns the document's first child [Element], or `null` if there
  /// are no child elements.
  ///
  /// For HTML documents, this is usually the only child, the root `<html>`
  /// element.
  ///
  /// See [Element.firstElementChild] for the first child element of specific
  /// elements within a document.
  Element? get firstElementChild {
    unsupportedPlatformError();
  }

  /// The **`Document.lastElementChild`** read-only property
  /// returns the document's last child [Element], or `null` if there
  /// are no child elements.
  ///
  /// For HTML documents, this is usually the only child, the root `<html>`
  /// element.
  ///
  /// See [Element.lastElementChild] for the last child element of specific
  /// elements within a document.
  Element? get lastElementChild {
    unsupportedPlatformError();
  }

  /// The **`Document.childElementCount`** read-only property
  /// returns the number of child elements of the document.
  ///
  /// To get the number of children of a specific element, see
  /// [Element.childElementCount].
  int get childElementCount {
    unsupportedPlatformError();
  }

  EventHandler get onabort {
    unsupportedPlatformError();
  }

  set onabort(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onauxclick {
    unsupportedPlatformError();
  }

  set onauxclick(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onbeforeinput {
    unsupportedPlatformError();
  }

  set onbeforeinput(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onbeforetoggle {
    unsupportedPlatformError();
  }

  set onbeforetoggle(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onblur {
    unsupportedPlatformError();
  }

  set onblur(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oncancel {
    unsupportedPlatformError();
  }

  set oncancel(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oncanplay {
    unsupportedPlatformError();
  }

  set oncanplay(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oncanplaythrough {
    unsupportedPlatformError();
  }

  set oncanplaythrough(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onchange {
    unsupportedPlatformError();
  }

  set onchange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onclick {
    unsupportedPlatformError();
  }

  set onclick(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onclose {
    unsupportedPlatformError();
  }

  set onclose(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oncontextlost {
    unsupportedPlatformError();
  }

  set oncontextlost(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oncontextmenu {
    unsupportedPlatformError();
  }

  set oncontextmenu(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oncontextrestored {
    unsupportedPlatformError();
  }

  set oncontextrestored(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oncopy {
    unsupportedPlatformError();
  }

  set oncopy(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oncuechange {
    unsupportedPlatformError();
  }

  set oncuechange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oncut {
    unsupportedPlatformError();
  }

  set oncut(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ondblclick {
    unsupportedPlatformError();
  }

  set ondblclick(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ondrag {
    unsupportedPlatformError();
  }

  set ondrag(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ondragend {
    unsupportedPlatformError();
  }

  set ondragend(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ondragenter {
    unsupportedPlatformError();
  }

  set ondragenter(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ondragleave {
    unsupportedPlatformError();
  }

  set ondragleave(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ondragover {
    unsupportedPlatformError();
  }

  set ondragover(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ondragstart {
    unsupportedPlatformError();
  }

  set ondragstart(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ondrop {
    unsupportedPlatformError();
  }

  set ondrop(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ondurationchange {
    unsupportedPlatformError();
  }

  set ondurationchange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onemptied {
    unsupportedPlatformError();
  }

  set onemptied(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onended {
    unsupportedPlatformError();
  }

  set onended(EventHandler value) {
    unsupportedPlatformError();
  }

  OnErrorEventHandler get onerror {
    unsupportedPlatformError();
  }

  set onerror(OnErrorEventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onfocus {
    unsupportedPlatformError();
  }

  set onfocus(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onformdata {
    unsupportedPlatformError();
  }

  set onformdata(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oninput {
    unsupportedPlatformError();
  }

  set oninput(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get oninvalid {
    unsupportedPlatformError();
  }

  set oninvalid(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onkeydown {
    unsupportedPlatformError();
  }

  set onkeydown(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onkeypress {
    unsupportedPlatformError();
  }

  set onkeypress(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onkeyup {
    unsupportedPlatformError();
  }

  set onkeyup(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onload {
    unsupportedPlatformError();
  }

  set onload(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onloadeddata {
    unsupportedPlatformError();
  }

  set onloadeddata(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onloadedmetadata {
    unsupportedPlatformError();
  }

  set onloadedmetadata(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onloadstart {
    unsupportedPlatformError();
  }

  set onloadstart(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onmousedown {
    unsupportedPlatformError();
  }

  set onmousedown(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onmouseenter {
    unsupportedPlatformError();
  }

  set onmouseenter(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onmouseleave {
    unsupportedPlatformError();
  }

  set onmouseleave(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onmousemove {
    unsupportedPlatformError();
  }

  set onmousemove(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onmouseout {
    unsupportedPlatformError();
  }

  set onmouseout(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onmouseover {
    unsupportedPlatformError();
  }

  set onmouseover(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onmouseup {
    unsupportedPlatformError();
  }

  set onmouseup(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpaste {
    unsupportedPlatformError();
  }

  set onpaste(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpause {
    unsupportedPlatformError();
  }

  set onpause(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onplay {
    unsupportedPlatformError();
  }

  set onplay(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onplaying {
    unsupportedPlatformError();
  }

  set onplaying(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onprogress {
    unsupportedPlatformError();
  }

  set onprogress(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onratechange {
    unsupportedPlatformError();
  }

  set onratechange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onreset {
    unsupportedPlatformError();
  }

  set onreset(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onresize {
    unsupportedPlatformError();
  }

  set onresize(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onscroll {
    unsupportedPlatformError();
  }

  set onscroll(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onscrollend {
    unsupportedPlatformError();
  }

  set onscrollend(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onsecuritypolicyviolation {
    unsupportedPlatformError();
  }

  set onsecuritypolicyviolation(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onseeked {
    unsupportedPlatformError();
  }

  set onseeked(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onseeking {
    unsupportedPlatformError();
  }

  set onseeking(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onselect {
    unsupportedPlatformError();
  }

  set onselect(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onslotchange {
    unsupportedPlatformError();
  }

  set onslotchange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onstalled {
    unsupportedPlatformError();
  }

  set onstalled(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onsubmit {
    unsupportedPlatformError();
  }

  set onsubmit(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onsuspend {
    unsupportedPlatformError();
  }

  set onsuspend(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ontimeupdate {
    unsupportedPlatformError();
  }

  set ontimeupdate(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ontoggle {
    unsupportedPlatformError();
  }

  set ontoggle(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onvolumechange {
    unsupportedPlatformError();
  }

  set onvolumechange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onwaiting {
    unsupportedPlatformError();
  }

  set onwaiting(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onwheel {
    unsupportedPlatformError();
  }

  set onwheel(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onanimationstart {
    unsupportedPlatformError();
  }

  set onanimationstart(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onanimationiteration {
    unsupportedPlatformError();
  }

  set onanimationiteration(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onanimationend {
    unsupportedPlatformError();
  }

  set onanimationend(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onanimationcancel {
    unsupportedPlatformError();
  }

  set onanimationcancel(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ontransitionrun {
    unsupportedPlatformError();
  }

  set ontransitionrun(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ontransitionstart {
    unsupportedPlatformError();
  }

  set ontransitionstart(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ontransitionend {
    unsupportedPlatformError();
  }

  set ontransitionend(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ontransitioncancel {
    unsupportedPlatformError();
  }

  set ontransitioncancel(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpointerover {
    unsupportedPlatformError();
  }

  set onpointerover(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpointerenter {
    unsupportedPlatformError();
  }

  set onpointerenter(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpointerdown {
    unsupportedPlatformError();
  }

  set onpointerdown(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpointermove {
    unsupportedPlatformError();
  }

  set onpointermove(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpointerup {
    unsupportedPlatformError();
  }

  set onpointerup(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpointercancel {
    unsupportedPlatformError();
  }

  set onpointercancel(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpointerout {
    unsupportedPlatformError();
  }

  set onpointerout(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onpointerleave {
    unsupportedPlatformError();
  }

  set onpointerleave(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ongotpointercapture {
    unsupportedPlatformError();
  }

  set ongotpointercapture(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onlostpointercapture {
    unsupportedPlatformError();
  }

  set onlostpointercapture(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onselectstart {
    unsupportedPlatformError();
  }

  set onselectstart(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onselectionchange {
    unsupportedPlatformError();
  }

  set onselectionchange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ontouchstart {
    unsupportedPlatformError();
  }

  set ontouchstart(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ontouchend {
    unsupportedPlatformError();
  }

  set ontouchend(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ontouchmove {
    unsupportedPlatformError();
  }

  set ontouchmove(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get ontouchcancel {
    unsupportedPlatformError();
  }

  set ontouchcancel(EventHandler value) {
    unsupportedPlatformError();
  }
}

/// The **XMLDocument** interface represents an XML document. It inherits from
/// the generic [Document] and does not add any specific methods or properties
/// to it: nevertheless, several algorithms behave differently with the two
/// types of documents.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument).
extension type XMLDocument._(JSObject _) implements Document, JSObject {}
extension type ElementCreationOptions._(JSObject _) implements JSObject {
  factory ElementCreationOptions({String? is_}) {
    unsupportedPlatformError();
  }

  String get is_ {
    unsupportedPlatformError();
  }

  set is_(String value) {
    unsupportedPlatformError();
  }
}

/// The **`DOMImplementation`** interface represents an object providing methods
/// which are not dependent on any particular document. Such an object is
/// returned by the [Document.implementation] property.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation).
extension type DOMImplementation._(JSObject _) implements JSObject {
  /// The **`DOMImplementation.createDocumentType()`** method returns
  /// a [DocumentType] object which can either be used with
  /// [DOMImplementation.createDocument] upon document creation or can be put
  /// into the document via methods like [Node.insertBefore] or
  /// [Node.replaceChild].
  DocumentType createDocumentType(
    String qualifiedName,
    String publicId,
    String systemId,
  ) {
    unsupportedPlatformError();
  }

  /// The **`DOMImplementation.createDocument()`** method creates and
  /// returns an [XMLDocument].
  XMLDocument createDocument(
    String? namespace,
    String qualifiedName, [
    DocumentType? doctype,
  ]) {
    unsupportedPlatformError();
  }

  /// The
  /// **`DOMImplementation.createHTMLDocument()`** method creates a
  /// new HTML [Document].
  Document createHTMLDocument([String? title]) {
    unsupportedPlatformError();
  }

  /// The
  /// **`DOMImplementation.hasFeature()`** method returns a
  /// boolean flag indicating if a given feature is supported. It is
  /// deprecated and modern browsers return `true` in all cases.
  ///
  /// The different implementations fairly diverged in what kind of features
  /// were reported.
  /// The latest version of the spec settled to force this method to always
  /// return
  /// `true`, where the functionality was accurate and in use.
  bool hasFeature() {
    unsupportedPlatformError();
  }
}

/// The **`DocumentType`** interface represents a [Node] containing a doctype.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/DocumentType).
extension type DocumentType._(JSObject _) implements Node, JSObject {
  /// The **`DocumentType.before()`** method inserts a set of
  /// [Node] objects or strings in the children list of the
  /// `DocumentType`'s parent, just before the `DocumentType`.
  /// Strings are inserted as equivalent [Text] nodes.
  void before(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`DocumentType.after()`** method inserts a set of
  /// [Node] objects or strings in the children list of the
  /// `DocumentType`'s parent, just after the `DocumentType`.
  /// Strings are inserted as equivalent [Text] nodes.
  void after(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`DocumentType.replaceWith()`** method replaces the document type
  /// with a set of given nodes.
  void replaceWith(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`DocumentType.remove()`** method removes a document's `doctype`.
  void remove() {
    unsupportedPlatformError();
  }

  /// The read-only **`name`** property of the [DocumentType] returns the type
  /// of the document.
  ///
  /// For synthetic `DocumentType`, this property reflects the value given in
  /// parameter to [DOMImplementation.createDocumentType].
  ///
  /// For HTML documents, browsers always set it up to `html`, whatever the
  /// actual `DOCTYPE` in the source code is.
  String get name {
    unsupportedPlatformError();
  }

  /// The read-only **`publicId`** property of the [DocumentType] returns a
  /// formal identifier of the document.
  ///
  /// For synthetic `DocumentType`, this property reflects the value given in
  /// parameter to [DOMImplementation.createDocumentType].
  ///
  /// For HTML documents, browsers always set it up to `html`, whatever the
  /// actual `DOCTYPE` in the source code is. For SVG documents, for example, it
  /// can be `"-//W3C//DTD SVG 1.1//EN"`.
  String get publicId {
    unsupportedPlatformError();
  }

  /// The read-only **`systemId`** property of the [DocumentType] returns the
  /// URL of the associated DTD.
  ///
  /// For synthetic `DocumentType`, this property reflects the value given in
  /// parameter to [DOMImplementation.createDocumentType].
  ///
  /// For HTML documents, browsers always set it up to `html`, whatever the
  /// actual `DOCTYPE` in the source code is. For SVG documents, for example, it
  /// can be `"http://www.w3.org/2000/svg"`.
  String get systemId {
    unsupportedPlatformError();
  }
}

/// The **`DocumentFragment`** interface represents a minimal document object
/// that has no parent.
///
/// It is used as a lightweight version of [Document] that stores a segment of a
/// document structure comprised of nodes just like a standard document. The key
/// difference is due to the fact that the document fragment isn't part of the
/// active document tree structure. Changes made to the fragment don't affect
/// the document.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment).
extension type DocumentFragment._(JSObject _) implements Node, JSObject {
  factory DocumentFragment() {
    unsupportedPlatformError();
  }

  /// The **`getElementById()`** method of the [DocumentFragment] returns an
  /// [Element] object representing the element whose [Element.id] property
  /// matches the specified string. Since element IDs are required to be unique
  /// if specified, they're a useful way to get access to a specific element
  /// quickly.
  ///
  /// If you need to get access to an element which doesn't have an ID, you can
  /// use [Document.querySelector] to find the element using any .
  ///
  /// > **Note:** IDs should be unique inside a document fragment. If two or
  /// > more elements in a document fragment have the same ID, this method
  /// > returns the first element found.
  Element? getElementById(String elementId) {
    unsupportedPlatformError();
  }

  /// The **`DocumentFragment.prepend()`** method
  /// inserts a set of [Node] objects or string objects before
  /// the first child of the document fragment. String objects
  /// are inserted as equivalent [Text] nodes.
  ///
  /// This method prepends a child to a `DocumentFragment`. To prepend to an
  /// arbitrary element in the tree, see [Element.prepend].
  void prepend(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`DocumentFragment.append()`** method
  /// inserts a set of [Node] objects or string objects after
  /// the last child of the document fragment. String objects
  /// are inserted as equivalent [Text] nodes.
  ///
  /// This method appends a child to a `DocumentFragment`. To append to an
  /// arbitrary element in the tree, see [Element.append].
  void append(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`DocumentFragment.replaceChildren()`** method replaces the
  /// existing children of a `DocumentFragment` with a specified new set of
  /// children. These
  /// can be string or [Node] objects.
  void replaceChildren(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`DocumentFragment.querySelector()`** method returns the
  /// first element, or `null` if no matches are found, within the
  /// [DocumentFragment] (using depth-first pre-order traversal of the
  /// document's nodes) that matches the specified group of selectors.
  ///
  /// If the selector matches an ID and this ID is erroneously used several
  /// times in the
  /// document, it returns the first matching element.
  ///
  /// If the selectors specified in parameter are invalid a [DOMException] with
  /// a `SYNTAX_ERR` value is raised.
  Element? querySelector(String selectors) {
    unsupportedPlatformError();
  }

  /// The **`DocumentFragment.querySelectorAll()`** method returns a
  /// [NodeList] of elements within the [DocumentFragment] (using
  /// depth-first pre-order traversal of the document's nodes) that matches the
  /// specified
  /// group of selectors.
  ///
  /// If the selectors specified in parameter are invalid a [DOMException] with
  /// a `SYNTAX_ERR` value is raised.
  NodeList querySelectorAll(String selectors) {
    unsupportedPlatformError();
  }

  /// The read-only **`children`** property returns a live [HTMLCollection]
  /// which contains all of the child [Element] of the document fragment upon
  /// which it was called.
  HTMLCollection get children {
    unsupportedPlatformError();
  }

  /// The **`DocumentFragment.firstElementChild`** read-only property
  /// returns the document fragment's first child [Element], or `null` if there
  /// are no child elements.
  Element? get firstElementChild {
    unsupportedPlatformError();
  }

  /// The **`DocumentFragment.lastElementChild`** read-only property
  /// returns the document fragment's last child [Element], or `null` if there
  /// are no child elements.
  Element? get lastElementChild {
    unsupportedPlatformError();
  }

  /// The **`DocumentFragment.childElementCount`** read-only property
  /// returns the number of child elements of a `DocumentFragment`.
  ///
  /// To get the number of children of a specific element, see
  /// [Element.childElementCount].
  int get childElementCount {
    unsupportedPlatformError();
  }
}

/// The **`ShadowRoot`** interface of the Shadow DOM API is the root node of a
/// DOM subtree that is rendered separately from a document's main DOM tree.
///
/// You can retrieve a reference to an element's shadow root using its
/// [Element.shadowRoot] property, provided it was created using
/// [Element.attachShadow] with the `mode` option set to `open`.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot).
extension type ShadowRoot._(JSObject _) implements DocumentFragment, JSObject {
  /// The **`setHTMLUnsafe()`** method of the [ShadowRoot] interface is used to
  /// parse a string of HTML into a [DocumentFragment], which then replaces the
  /// element's subtree in the DOM.
  /// The input HTML may include
  /// [declarative shadow roots](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#declarative_shadow_dom).
  ///
  /// The suffix "Unsafe" in the method name indicates that the method does not
  /// sanitize or remove potentially unsafe XSS-relevant input, such as
  /// `<script>` elements, and script or event handler content attributes.
  ///
  /// If the string of HTML defines more than one
  /// [declarative shadow root](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#declarative_shadow_dom)
  /// in a particular shadow host then only the first [ShadowRoot] is created —
  /// subsequent declarations are parsed as `<template>` elements within that
  /// shadow root.
  ///
  /// > **Note:** This method should be used instead of [ShadowRoot.innerHTML]
  /// > when a string of HTML may contain declarative shadow roots.
  void setHTMLUnsafe(JSAny html) {
    unsupportedPlatformError();
  }

  /// The **`getHTML()`** method of the [ShadowRoot] interface is used to
  /// serialize a shadow root's DOM to an HTML string.
  ///
  /// The method provides an options argument that enables the serialization of
  /// child nodes that are shadow roots.
  /// The options can be used to include nested shadow roots that have been set
  /// as [ShadowRoot.serializable], and/or a specified array of [ShadowRoot]
  /// objects, which may be either open or closed.
  ///
  /// Without arguments, child nodes that are shadow roots are not serialized,
  /// and this method behaves in the same way as reading the value of
  /// [Element.innerHTML].
  String getHTML([GetHTMLOptions? options]) {
    unsupportedPlatformError();
  }

  /// The **`getAnimations()`** method of the [ShadowRoot] interface
  /// returns an array of all [Animation] objects currently in effect whose
  /// target elements are descendants of the shadow tree. This array includes
  /// [CSS Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations),
  /// [CSS Transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions),
  /// and
  /// [Web Animations](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API).
  JSArray<Animation> getAnimations() {
    unsupportedPlatformError();
  }

  /// The **`mode`** read-only property of the [ShadowRoot] specifies its mode —
  /// either `open` or `closed`.
  /// This defines whether or not the shadow root's internal features are
  /// accessible from JavaScript.
  ///
  /// When the `mode` of a shadow root is "`closed`", the shadow root's
  /// implementation internals are inaccessible and unchangeable from
  /// JavaScript—in the same way the implementation internals of, for example,
  /// the `video` element are inaccessible and unchangeable from JavaScript.
  ///
  /// The property value is set using the `options.mode` property of the object
  /// passed to [Element.attachShadow], or using the
  /// [`shadowrootmode`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#shadowrootmode)
  /// attribute of the
  /// [`<template>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template)
  /// element when a shadow root is created declaratively.
  ShadowRootMode get mode {
    unsupportedPlatformError();
  }

  /// The **`delegatesFocus`** read-only property of the [ShadowRoot] interface
  /// returns `true` if the shadow root delegates focus, and `false` otherwise.
  ///
  /// If `true`, when a non-focusable part of the shadow DOM is clicked, or
  /// `.focus()` is called on the host element, the first focusable part is
  /// given focus, and the shadow host is given any available `:focus` styling.
  ///
  /// Focus is of particular importance for keyboard users (including those
  /// using screen readers). `delegatesFocus` default behavior is to focus the
  /// first focusable element — which may be undesirable if that element is not
  /// meant to be part of the tabbing order (for example, an element with
  /// `tabindex="-1"`), or if a more 'important' focusable element should
  /// receive initial focus (for instance, the first text field rather than the
  /// 'close' button which precedes it). In such cases, the `autofocus`
  /// attribute can be specified on the element which should receive initial
  /// focus. Use the `autofocus` attribute with caution as it can introduce
  /// accessibility issues, such as bypassing important content which may go
  /// unnoticed due to focus being set to an element later in the DOM order.
  ///
  /// The property value is originally set using the `delegatesFocus` property
  /// of the object passed to [Element.attachShadow], or using the
  /// [`shadowrootdelegatesfocus`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#shadowrootclonable)
  /// attribute of the
  /// [`<template>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template)
  /// element when a shadow root is created declaratively.
  bool get delegatesFocus {
    unsupportedPlatformError();
  }

  /// The read-only **`slotAssignment`** property of the [ShadowRoot] interface
  /// returns the _slot assignment mode_ for the shadow DOM tree. Nodes are
  /// either automatically assigned (`named`) or manually assigned (`manual`).
  /// The value of this property defined using the `slotAssignment` option when
  /// calling [Element.attachShadow].
  SlotAssignmentMode get slotAssignment {
    unsupportedPlatformError();
  }

  /// The **`clonable`** read-only property of the [ShadowRoot] interface
  /// returns `true` if the shadow root is clonable, and `false` otherwise.
  ///
  /// When the value is `true`, a shadow host cloned with [Node.cloneNode] or
  /// [Document.importNode] will include a copy of the shadow root.
  ///
  /// By default the value is `false`.
  /// It can be set to `true` using the `clonable` option of the
  /// [Element.attachShadow] method or by setting the
  /// [`shadowrootclonable`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#shadowrootclonable)
  /// attribute of the `<template>` element that is being used to declaratively
  /// attach a shadow root.
  bool get clonable {
    unsupportedPlatformError();
  }

  /// The **`serializable`** read-only property of the [ShadowRoot] interface
  /// returns `true` if the shadow root is serializable.
  ///
  /// If set, the shadow root may be serialized by calling the [Element.getHTML]
  /// or [ShadowRoot.getHTML] methods with the `options.serializableShadowRoots`
  /// parameter set `true`.
  ///
  /// The serializable property of a shadow root is specified when the shadow
  /// root is created, either declaratively by adding the
  /// [`shadowrootserializable`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#shadowrootserializable)
  /// attribute on a `<template>` element (along with an allowed
  /// [`shadowrootmode`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#shadowrootmode)
  /// value), or by setting the
  /// [`options.serializable`](/en-US/docs/Web/API/Element/attachShadow#serializable)
  /// parameter to `true` when using
  /// [`Element.attachShadow()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow).
  bool get serializable {
    unsupportedPlatformError();
  }

  /// The **`host`** read-only property of
  /// the [ShadowRoot] returns a reference to the DOM element the
  /// `ShadowRoot` is attached to.
  Element get host {
    unsupportedPlatformError();
  }

  EventHandler get onslotchange {
    unsupportedPlatformError();
  }

  set onslotchange(EventHandler value) {
    unsupportedPlatformError();
  }

  /// The **`innerHTML`** property of the [ShadowRoot]
  /// interface sets or returns a reference to the DOM tree inside the
  /// `ShadowRoot`.
  JSAny get innerHTML {
    unsupportedPlatformError();
  }

  set innerHTML(JSAny value) {
    unsupportedPlatformError();
  }

  /// The **`styleSheets`** read-only property of the [ShadowRoot] interface
  /// returns a [StyleSheetList] of [CSSStyleSheet] objects, for stylesheets
  /// explicitly linked into or embedded in a shadow tree.
  StyleSheetList get styleSheets {
    unsupportedPlatformError();
  }

  /// The **`adoptedStyleSheets`** property of the [ShadowRoot] interface sets
  /// an array of constructed stylesheets to be used by the shadow DOM subtree.
  ///
  /// > **Note:** A constructed stylesheet is a stylesheet created
  /// > programmatically using the [`CSSStyleSheet()`
  /// > constructor](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/CSSStyleSheet)
  /// > (as compared to one created by a user-agent when importing a stylesheet
  /// > from a script, imported using `style` and , or linked to via `link`).
  ///
  /// The same constructed stylesheet can be adopted by multiple [ShadowRoot]
  /// instances, and by the parent document (using the
  /// [Document.adoptedStyleSheets] property).
  /// Changing an adopted stylesheet will affect all the adopting objects.
  ///
  /// Stylesheets in the `adoptedStyleSheets` property are considered along with
  /// the shadow DOM's other stylesheets.
  /// For the purpose of determining the final computed CSS of any element, they
  /// are considered to have been added _after_ the other stylesheets in the
  /// shadow DOM
  /// ([`ShadowRoot.styleSheets`](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/styleSheets)).
  ///
  /// Only stylesheets created using the [`CSSStyleSheet()`
  /// constructor](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/CSSStyleSheet),
  /// and from within the same parent [Document] as the shadow root, may be
  /// adopted.
  JSArray<CSSStyleSheet> get adoptedStyleSheets {
    unsupportedPlatformError();
  }

  set adoptedStyleSheets(JSArray<CSSStyleSheet> value) {
    unsupportedPlatformError();
  }

  /// The **`fullscreenElement`** read-only property of the
  /// [ShadowRoot] interface returns the element within the shadow tree that is
  /// currently displayed in full screen.
  Element? get fullscreenElement {
    unsupportedPlatformError();
  }

  /// The **`activeElement`** read-only property of the
  /// [ShadowRoot] interface returns the element within the shadow tree that has
  /// focus.
  Element? get activeElement {
    unsupportedPlatformError();
  }

  /// The **`pictureInPictureElement`** read-only property of the
  /// [ShadowRoot] interface returns the [Element] that is currently being
  /// presented in picture-in-picture mode in this shadow tree, or `null` if
  /// picture-in-picture mode is not currently in use.
  Element? get pictureInPictureElement {
    unsupportedPlatformError();
  }

  /// The **`pointerLockElement`** read-only property of the [ShadowRoot]
  /// interface provides the element set as the target for mouse events while
  /// the pointer is locked.
  /// It is `null` if lock is pending, pointer is unlocked, or the target is in
  /// another tree.
  Element? get pointerLockElement {
    unsupportedPlatformError();
  }
}

/// **`Element`** is the most general base class from which all element objects
/// (i.e. objects that represent elements) in a [Document] inherit. It only has
/// methods and properties common to all kinds of elements. More specific
/// classes inherit from `Element`.
///
/// For example, the [HTMLElement] interface is the base interface for HTML
/// elements. Similarly, the [SVGElement] interface is the basis for all SVG
/// elements, and the [MathMLElement] interface is the base interface for MathML
/// elements. Most functionality is specified further down the class hierarchy.
///
/// Languages outside the realm of the Web platform, like XUL through the
/// `XULElement` interface, also implement `Element`.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Element).
extension type Element._(JSObject _) implements Node, JSObject {
  /// The **`hasAttributes()`** method of the [Element]
  /// interface returns a boolean value indicating whether the current element
  /// has any
  /// attributes or not.
  bool hasAttributes() {
    unsupportedPlatformError();
  }

  /// The **`getAttributeNames()`** method of the
  /// [Element] interface returns the attribute names of the element as an
  /// `Array` of strings. If the element has no attributes it returns an empty
  /// array.
  ///
  /// Using `getAttributeNames()` along with
  /// [Element.getAttribute], is a memory-efficient and
  /// performant alternative to accessing [Element.attributes].
  ///
  /// The names returned by **`getAttributeNames()`** are _qualified_ attribute
  /// names, meaning that attributes with a namespace prefix have their names
  /// returned with that namespace prefix (_not_ the actual namespace), followed
  /// by a colon, followed by the attribute name (for example,
  /// **`xlink:href`**), while any attributes which have no namespace prefix
  /// have their names returned as-is (for example, **`href`**).
  JSArray<JSString> getAttributeNames() {
    unsupportedPlatformError();
  }

  /// The **`getAttribute()`** method of the
  /// [Element] interface returns the value of a specified attribute on the
  /// element.
  ///
  /// If the given attribute does not exist, the value returned will be `null`.
  ///
  /// If you need to inspect the [Attr] node's properties, you can use the
  /// [Element.getAttributeNode] method instead.
  String? getAttribute(String qualifiedName) {
    unsupportedPlatformError();
  }

  /// The **`getAttributeNS()`** method of the [Element]
  /// interface returns the string value of the attribute with the specified
  /// namespace and
  /// name. If the named attribute does not exist, the value returned will
  /// either be
  /// `null` or `""` (the empty string); see [Notes](#notes) for
  /// details.
  ///
  /// If you are working with HTML documents and you don't need to specify the
  /// requested attribute as being part of a specific namespace, use the
  /// [Element.getAttribute] method instead.
  String? getAttributeNS(
    String? namespace,
    String localName,
  ) {
    unsupportedPlatformError();
  }

  /// The **`setAttribute()`** method of the [Element] interface sets the value
  /// of an attribute on the specified element. If the attribute already exists,
  /// the value is updated; otherwise a new attribute is added with the
  /// specified name and value.
  ///
  /// To get the current value of an attribute, use [Element.getAttribute]; to
  /// remove an attribute, call [Element.removeAttribute].
  ///
  /// If you need to work with the [Attr] node (such as cloning from another
  /// element) before adding it, you can use the [Element.setAttributeNode]
  /// method instead.
  void setAttribute(
    String qualifiedName,
    String value,
  ) {
    unsupportedPlatformError();
  }

  /// `setAttributeNS` adds a new attribute or changes the value of an attribute
  /// with the given namespace and name.
  ///
  /// If you are working with HTML documents and you don't need to specify the
  /// requested attribute as being part of a specific namespace, use the
  /// [Element.setAttribute] method instead.
  void setAttributeNS(
    String? namespace,
    String qualifiedName,
    String value,
  ) {
    unsupportedPlatformError();
  }

  /// The [Element] method
  /// **`removeAttribute()`** removes the attribute with the
  /// specified name from the element.
  void removeAttribute(String qualifiedName) {
    unsupportedPlatformError();
  }

  /// The **`removeAttributeNS()`** method of the
  /// [Element] interface removes the specified attribute with the specified
  /// namespace from an element.
  ///
  /// If you are working with HTML and you don't need to specify the requested
  /// attribute as being part of a specific namespace, use the
  /// [Element.removeAttribute] method instead.
  void removeAttributeNS(
    String? namespace,
    String localName,
  ) {
    unsupportedPlatformError();
  }

  /// The **`toggleAttribute()`** method of the
  /// [Element] interface toggles a Boolean attribute (removing it if it is
  /// present and adding it if it is not present) on the given element.
  bool toggleAttribute(
    String qualifiedName, [
    bool? force,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`Element.hasAttribute()`** method returns a
  /// **Boolean** value indicating whether the specified element has the
  /// specified attribute or not.
  bool hasAttribute(String qualifiedName) {
    unsupportedPlatformError();
  }

  /// The **`hasAttributeNS()`** method of the [Element] interface returns a
  /// boolean value indicating whether the current element has the specified
  /// attribute with the specified namespace.
  ///
  /// If you are working with HTML documents and you don't need to specify the
  /// requested attribute as being part of a specific namespace, use the
  /// [Element.hasAttribute] method instead.
  bool hasAttributeNS(
    String? namespace,
    String localName,
  ) {
    unsupportedPlatformError();
  }

  /// Returns the specified attribute of the specified element, as an [Attr]
  /// node.
  ///
  /// This method is useful if you need the attribute's
  /// [instance properties](https://developer.mozilla.org/en-US/docs/Web/API/Attr#instance_properties).
  /// If you only need the attribute's value, you can use the
  /// [Element.getAttribute] method instead.
  Attr? getAttributeNode(String qualifiedName) {
    unsupportedPlatformError();
  }

  /// The **`getAttributeNodeNS()`** method of the [Element] interface returns
  /// the namespaced [Attr] node of an element.
  ///
  /// This method is useful if you need the namespaced attribute's
  /// [instance properties](https://developer.mozilla.org/en-US/docs/Web/API/Attr#instance_properties).
  /// If you only need the namespaced attribute's value, you can use the
  /// [Element.getAttributeNS] method instead.
  ///
  /// If you need the [Attr] node of an element in HTML documents and the
  /// attribute is not namespaced, use the [Element.getAttributeNode] method
  /// instead.
  Attr? getAttributeNodeNS(
    String? namespace,
    String localName,
  ) {
    unsupportedPlatformError();
  }

  /// The **`setAttributeNode()`** method of the [Element] interface adds a new
  /// [Attr] node to the specified element.
  ///
  /// If you don't need to work with the attribute node (such as cloning from
  /// another element) before adding it, you can use the [Element.setAttribute]
  /// method instead.
  Attr? setAttributeNode(Attr attr) {
    unsupportedPlatformError();
  }

  /// The **`setAttributeNodeNS()`** method of the [Element] interface adds a
  /// new namespaced [Attr] node to an element.
  ///
  /// If you don't need to work with the attribute node (such as cloning from
  /// another element) before adding it, you can use the
  /// [Element.setAttributeNS] method instead.
  ///
  /// If you are working with HTML documents and you don't need to specify the
  /// requested attribute as being part of a specific namespace, use the
  /// [Element.setAttribute] method instead.
  Attr? setAttributeNodeNS(Attr attr) {
    unsupportedPlatformError();
  }

  /// The **`removeAttributeNode()`** method of the [Element] interface removes
  /// the specified [Attr] node from the element.
  ///
  /// If you don't need to inspect the attribute node before removing it, you
  /// can use the [Element.removeAttribute] method instead.
  Attr removeAttributeNode(Attr attr) {
    unsupportedPlatformError();
  }

  /// The **`Element.attachShadow()`** method attaches a shadow DOM tree to the
  /// specified element and returns a reference to its [ShadowRoot].
  ShadowRoot attachShadow(ShadowRootInit init) {
    unsupportedPlatformError();
  }

  /// The **`closest()`** method of the [Element] interface traverses the
  /// element and its parents (heading toward the document root) until it finds
  /// a node that matches the specified
  /// [CSS selector](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors).
  Element? closest(String selectors) {
    unsupportedPlatformError();
  }

  /// The **`matches()`** method of the [Element] interface tests whether the
  /// element would be selected by the specified
  /// [CSS selector](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors).
  bool matches(String selectors) {
    unsupportedPlatformError();
  }

  /// The
  /// **`Element.getElementsByTagName()`** method returns a live
  /// [HTMLCollection] of elements with the given
  /// [tag name](https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName).
  ///
  /// All descendants of the
  /// specified element are searched, but not the element itself. The returned
  /// list is
  /// _live_, which means it updates itself with the DOM tree automatically.
  /// Therefore, there is no need to call `Element.getElementsByTagName()` with
  /// the same element and arguments repeatedly if the DOM changes in between
  /// calls.
  ///
  /// When called on an HTML element in an HTML document, `getElementsByTagName`
  /// lower-cases the argument before searching for it. This is undesirable when
  /// trying to
  /// match  SVG elements (such as
  /// [`<linearGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient))
  /// in an HTML document. Instead, use [Element.getElementsByTagNameNS],
  /// which preserves the capitalization of the tag name.
  ///
  /// `Element.getElementsByTagName` is similar to
  /// [Document.getElementsByTagName], except that it only searches for
  /// elements that are descendants of the specified element.
  HTMLCollection getElementsByTagName(String qualifiedName) {
    unsupportedPlatformError();
  }

  /// The **`Element.getElementsByTagNameNS()`** method returns a
  /// live [HTMLCollection] of elements with the given tag name belonging to the
  /// given namespace. It is similar to [Document.getElementsByTagNameNS],
  /// except
  /// that its search is restricted to descendants of the specified element.
  HTMLCollection getElementsByTagNameNS(
    String? namespace,
    String localName,
  ) {
    unsupportedPlatformError();
  }

  /// The [Element] method
  /// **`getElementsByClassName()`** returns a live
  /// [HTMLCollection] which contains every descendant element which has the
  /// specified class name or names.
  ///
  /// The method [Document.getElementsByClassName]
  /// on the [Document] interface works essentially the same way, except it acts
  /// on the entire document, starting at the document root.
  HTMLCollection getElementsByClassName(String classNames) {
    unsupportedPlatformError();
  }

  /// The **`insertAdjacentElement()`** method of the
  /// [Element] interface inserts a given element node at a given position
  /// relative to the element it is invoked upon.
  Element? insertAdjacentElement(
    String where,
    Element element,
  ) {
    unsupportedPlatformError();
  }

  /// The **`insertAdjacentText()`** method of the [Element] interface, given a
  /// relative position and a string, inserts a new text node at the given
  /// position relative to the element it is called from.
  void insertAdjacentText(
    String where,
    String data,
  ) {
    unsupportedPlatformError();
  }

  /// The **`computedStyleMap()`** method of
  /// the [Element] interface returns a [StylePropertyMapReadOnly]
  /// interface which provides a read-only representation of a CSS declaration
  /// block that is
  /// an alternative to [CSSStyleDeclaration].
  StylePropertyMapReadOnly computedStyleMap() {
    unsupportedPlatformError();
  }

  /// The **`getClientRects()`** method of the [Element]
  /// interface returns a collection of [DOMRect] objects that indicate the
  /// bounding rectangles for each
  /// [CSS border box](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Introduction_to_the_CSS_box_model)
  /// in a client.
  ///
  /// Most elements only have one border box each, but a multiline
  /// [inline-level element](https://developer.mozilla.org/en-US/docs/Glossary/Inline-level_content)
  /// (such as a multiline
  /// `span` element, by default) has a border box around each line.
  DOMRectList getClientRects() {
    unsupportedPlatformError();
  }

  /// The **`Element.getBoundingClientRect()`** method returns a
  /// [DOMRect] object providing information about the size of an element and
  /// its
  /// position relative to the
  /// [viewport](https://developer.mozilla.org/en-US/docs/Glossary/Viewport).
  DOMRect getBoundingClientRect() {
    unsupportedPlatformError();
  }

  /// The **`checkVisibility()`** method of the [Element] interface checks
  /// whether the element is visible.
  ///
  /// The method returns `false` in either of the following situations:
  ///
  /// - The element doesn't have an associated box, for example because the CSS
  ///   `display` property is set to
  ///   [`none`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#none)
  ///   or
  ///   [`contents`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#contents).
  /// - The element is not being rendered because the element or an ancestor
  ///   element sets the  property to
  ///   [`hidden`](https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility#hidden).
  ///
  /// The optional parameter enables additional checks to test for other
  /// interpretations of what "visible" means.
  /// For example, you can further check whether an element has an opacity of
  /// `0`, if the value of the element
  /// [`visibility`](https://developer.mozilla.org/en-US/docs/Web/CSS/visibility)
  /// property makes it invisible, or if the element  property has a value of
  /// [`auto`](https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility#auto)
  /// and its rendering is currently being skipped.
  bool checkVisibility([CheckVisibilityOptions? options]) {
    unsupportedPlatformError();
  }

  /// The [Element] interface's
  /// **`scrollIntoView()`** method scrolls the element's ancestor
  /// containers such that the element on which `scrollIntoView()` is called is
  /// visible to the user.
  void scrollIntoView([JSAny? arg]) {
    unsupportedPlatformError();
  }

  /// The **`scroll()`** method of the [Element]
  /// interface scrolls the element to a particular set of coordinates inside a
  /// given
  /// element.
  void scroll([
    JSAny? optionsOrX,
    num? y,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`scrollTo()`** method of the [Element]
  /// interface scrolls to a particular set of coordinates inside a given
  /// element.
  void scrollTo([
    JSAny? optionsOrX,
    num? y,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`scrollBy()`** method of the [Element]
  /// interface scrolls an element by the given amount.
  void scrollBy([
    JSAny? optionsOrX,
    num? y,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`Element.requestFullscreen()`**
  /// method issues an asynchronous request to make the element be displayed in
  /// fullscreen
  /// mode.
  ///
  /// It's not guaranteed that the element will be put into full screen mode. If
  /// permission
  /// to enter full screen mode is granted, the returned `Promise` will resolve
  /// and the element will receive a [Element.fullscreenchange_event] event to
  /// let it know that
  /// it's now in full screen mode. If permission is denied, the promise is
  /// rejected and the
  /// element receives a [Element.fullscreenerror_event] event instead. If the
  /// element has been
  /// detached from the original document, then the document receives these
  /// events instead.
  JSPromise<JSAny?> requestFullscreen([FullscreenOptions? options]) {
    unsupportedPlatformError();
  }

  /// The **`setHTMLUnsafe()`** method of the [Element] interface is used to
  /// parse a string of HTML into a [DocumentFragment], which then replaces the
  /// element's subtree in the DOM.
  /// The input HTML may include
  /// [declarative shadow roots](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#declarative_shadow_dom).
  ///
  /// The suffix "Unsafe" in the method name indicates that the method does not
  /// sanitize or remove potentially unsafe XSS-relevant input, such as
  /// `<script>` elements, and script or event handler content attributes.
  ///
  /// If the string of HTML defines more than one
  /// [declarative shadow root](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#declarative_shadow_dom)
  /// in a particular shadow host then only the first [ShadowRoot] is created —
  /// subsequent declarations are parsed as `<template>` elements within that
  /// shadow root.
  ///
  /// > **Note:** This method should be used instead of [Element.innerHTML] when
  /// > a string of HTML may contain declarative shadow roots.
  void setHTMLUnsafe(JSAny html) {
    unsupportedPlatformError();
  }

  /// The **`getHTML()`** method of the [Element] interface is used to serialize
  /// an element's DOM to an HTML string.
  ///
  /// The method provides an options argument that enables the serialization of
  /// child nodes that are shadow roots.
  /// The options can be used to include nested shadow roots that have been set
  /// as [ShadowRoot.serializable], and/or a specified array of [ShadowRoot]
  /// objects, which may be either open or closed.
  ///
  /// Without arguments, child nodes that are shadow roots are not serialized,
  /// and this method behaves in the same way as reading the value of
  /// [Element.innerHTML].
  String getHTML([GetHTMLOptions? options]) {
    unsupportedPlatformError();
  }

  /// The **`insertAdjacentHTML()`** method of the
  /// [Element] interface parses the specified text as HTML or XML and inserts
  /// the resulting nodes into the DOM tree at a specified position.
  void insertAdjacentHTML(
    String position,
    JSAny string,
  ) {
    unsupportedPlatformError();
  }

  /// The **`setPointerCapture()`** method of the
  /// [Element] interface is used to designate a specific element as the
  /// _capture target_ of future pointer events. Subsequent events for the
  /// pointer will
  /// be targeted at the capture element until capture is released (via
  /// [Element.releasePointerCapture] or the
  /// [Element.pointerup_event] event is fired).
  ///
  /// > **Note:** Pointer capture will cause the target to capture all
  /// > subsequent pointer events as if they were occurring over the capturing
  /// > target. Accordingly, `pointerover`, `pointerenter`, `pointerleave`, and
  /// > `pointerout` **will not fire** as long as this capture is set.
  /// > For touchscreen browsers that allow
  /// > [direct manipulation](https://w3c.github.io/pointerevents/#dfn-direct-manipulation),
  /// > an
  /// > [implicit pointer capture](https://w3c.github.io/pointerevents/#dfn-implicit-pointer-capture)
  /// > will be called on the element when a `pointerdown` event triggers. The
  /// > capture can be released manually by calling
  /// > [element.releasePointerCapture] on the target element, or it will be
  /// > implicitly released after a `pointerup` or `pointercancel` event.
  ///
  /// > **Note:** If you need to move an element in the DOM, then make sure to
  /// > call `setPointerCapture()` **after DOM movements** so that
  /// > `setPointerCapture()` will not lose track of it. E.g., if you need to
  /// > use `Element.append()` to move an element somewhere else, then make sure
  /// > to call `setPointerCapture()` on it only after the call to
  /// > `Element.append()`.
  ///
  /// ### Overview of pointer capture
  ///
  /// _Pointer capture_ allows events for a particular _pointer event_
  /// ([PointerEvent]) to be re-targeted to a particular element instead of the
  /// normal (or _hit test_) target at a pointer's location. This can be used to
  /// ensure
  /// that an element continues to receive pointer events even if the pointer
  /// device's contact
  /// moves off the element (such as by scrolling or panning).
  void setPointerCapture(int pointerId) {
    unsupportedPlatformError();
  }

  /// The **`releasePointerCapture()`** method of the
  /// [Element] interface releases (stops) _pointer capture_ that was
  /// previously set for a specific ([PointerEvent]) _pointer_.
  ///
  /// See the [Element.setPointerCapture] method
  /// for a description of _pointer capture_ and how to set it for a particular
  /// element.
  void releasePointerCapture(int pointerId) {
    unsupportedPlatformError();
  }

  /// The **`hasPointerCapture()`** method of the
  /// [Element] interface checks whether the element on which it is invoked has
  /// pointer capture for the pointer identified by the given pointer ID.
  bool hasPointerCapture(int pointerId) {
    unsupportedPlatformError();
  }

  /// The **`requestPointerLock()`** method of the [Element] interface lets you
  /// asynchronously ask for the pointer to be locked on the given element.
  ///
  /// To track the success or failure of the request, it is necessary to listen
  /// for the [Document.pointerlockchange_event] and
  /// [Document.pointerlockerror_event] events at the [Document] level.
  ///
  /// > **Note:** In the current specification, `requestPointerLock()` only
  /// > communicates the success or failure of the request by firing
  /// > [Document.pointerlockchange_event] or [Document.pointerlockerror_event]
  /// > events.
  /// > [A proposed update to the specification](https://github.com/w3c/pointerlock/pull/49)
  /// > updates `requestPointerLock()` to return a `Promise` which communicates
  /// > success or failure. This page documents the version that returns a
  /// > `Promise`. However, note that this version is not yet a standard and is
  /// > not implemented by all browsers. See
  /// > [Browser compatibility](#browser_compatibility) for more information.
  JSPromise<JSAny?> requestPointerLock([PointerLockOptions? options]) {
    unsupportedPlatformError();
  }

  /// The **`Element.prepend()`** method inserts a set of
  /// [Node] objects or string objects before the first child
  /// of the [Element]. String objects are inserted as
  /// equivalent [Text] nodes.
  void prepend(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`Element.append()`** method
  /// inserts a set of [Node] objects or string objects after
  /// the last child of the `Element`. String objects
  /// are inserted as equivalent [Text] nodes.
  ///
  /// Differences from [Node.appendChild]:
  ///
  /// - `Element.append()` allows you to also append string
  /// objects, whereas `Node.appendChild()` only accepts [Node]
  /// objects.
  /// - `Element.append()` has no return value, whereas
  /// `Node.appendChild()` returns the appended [Node] object.
  /// - `Element.append()` can append several nodes and strings, whereas
  /// `Node.appendChild()` can only append one node.
  void append(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`Element.replaceChildren()`** method replaces the
  /// existing children of a [Node] with a specified new set of children. These
  /// can be string or [Node] objects.
  void replaceChildren(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`querySelector()`** method of the [Element]
  /// interface returns the first element that is a descendant of the element on
  /// which it is
  /// invoked that matches the specified group of selectors.
  Element? querySelector(String selectors) {
    unsupportedPlatformError();
  }

  /// The [Element] method **`querySelectorAll()`**
  /// returns a static (not live) [NodeList] representing a list of elements
  /// matching the specified group of selectors which are descendants of the
  /// element on which
  /// the method was called.
  NodeList querySelectorAll(String selectors) {
    unsupportedPlatformError();
  }

  /// The **`Element.before()`** method inserts a set of
  /// [Node] or string objects in the children list of this
  /// `Element`'s parent, just before this `Element`.
  /// String objects are inserted as equivalent [Text] nodes.
  void before(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`Element.after()`** method inserts a set of
  /// [Node] or string objects in the children list of the
  /// `Element`'s parent, just after the `Element`.
  /// String objects are inserted as equivalent [Text] nodes.
  void after(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`Element.replaceWith()`** method replaces this
  /// `Element` in the children list of its parent with a set of
  /// [Node] or string objects. String
  /// objects are inserted as equivalent [Text] nodes.
  void replaceWith(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`Element.remove()`** method removes the element from the DOM.
  void remove() {
    unsupportedPlatformError();
  }

  /// The [Element] interface's **`animate()`** method
  /// is a shortcut method which creates a new [Animation], applies it to the
  /// element, then plays the animation. It returns the created [Animation]
  /// object instance.
  ///
  /// > **Note:** Elements can have multiple animations applied to them. You can
  /// > get a list of the
  /// > animations that affect an element by calling [Element.getAnimations].
  Animation animate(
    JSObject? keyframes, [
    JSAny? options,
  ]) {
    unsupportedPlatformError();
  }

  /// The `getAnimations()` method of the [Element] interface
  /// (specified on the `Animatable` mixin) returns an array of all
  /// [Animation] objects affecting this element or which are scheduled to do so
  /// in future. It can optionally return [Animation] objects for descendant
  /// elements too.
  ///
  /// > **Note:** This array includes
  /// > [CSS Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations),
  /// > [CSS Transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions),
  /// > and
  /// > [Web Animations](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API).
  JSArray<Animation> getAnimations([GetAnimationsOptions? options]) {
    unsupportedPlatformError();
  }

  /// The **`Element.namespaceURI`** read-only property returns the namespace
  /// URI of the element, or `null` if the element is not in a namespace.
  String? get namespaceURI {
    unsupportedPlatformError();
  }

  /// The **`Element.prefix`** read-only property returns the
  /// namespace prefix of the specified element, or `null` if no prefix is
  /// specified.
  String? get prefix {
    unsupportedPlatformError();
  }

  /// The **`Element.localName`** read-only property returns the
  /// local part of the qualified name of an element.
  String get localName {
    unsupportedPlatformError();
  }

  /// The **`tagName`** read-only property
  /// of the [Element] interface returns the tag name of the element on which
  /// it's called.
  ///
  /// For example, if the element is an `img`, its
  /// `tagName` property is `IMG` (for HTML documents; it may be cased
  /// differently for XML/XHTML documents). Note: You can use the
  /// [Element.localName] property
  /// to access the Element's local name — which for the case in the example is
  /// `img` (lowercase) .
  String get tagName {
    unsupportedPlatformError();
  }

  /// The **`id`** property of the [Element] interface
  /// represents the element's identifier, reflecting the
  /// [**`id`**](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id)
  /// global attribute.
  ///
  /// If the `id` value is not the empty string, it must be unique in a
  /// document.
  ///
  /// The `id` is often used with [Document.getElementById] to retrieve a
  /// particular element.
  /// Another common case is to use an element's
  /// [ID as a selector](https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors)
  /// when styling the document with
  /// [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS).
  ///
  /// > **Note:** Identifiers are case-sensitive, but you should avoid creating
  /// > IDs that differ only in the capitalization.
  String get id {
    unsupportedPlatformError();
  }

  set id(String value) {
    unsupportedPlatformError();
  }

  /// The **`className`** property of the
  /// [Element] interface gets and sets the value of the
  /// [`class` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class)
  /// of the specified element.
  String get className {
    unsupportedPlatformError();
  }

  set className(String value) {
    unsupportedPlatformError();
  }

  /// The **`Element.classList`** is a read-only property that
  /// returns a live [DOMTokenList] collection of the `class`
  /// attributes of the element. This can then be used to manipulate the class
  /// list.
  ///
  /// Using `classList` is a convenient alternative to accessing an element's
  /// list
  /// of classes as a space-delimited string via [element.className].
  DOMTokenList get classList {
    unsupportedPlatformError();
  }

  /// The **`slot`** property of the [Element] interface
  /// returns the name of the shadow DOM slot the element is inserted in.
  ///
  /// A slot is a placeholder inside a
  /// [web component](https://developer.mozilla.org/en-US/docs/Web/API/Web_components)
  /// that users can fill with their own markup (see
  /// [Using templates and slots](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots)
  /// for more information).
  String get slot {
    unsupportedPlatformError();
  }

  set slot(String value) {
    unsupportedPlatformError();
  }

  /// The **`Element.attributes`** property returns a live collection
  /// of all attribute nodes registered to the specified node. It is a
  /// [NamedNodeMap], not an `Array`, so it has no `Array`
  /// methods and the [Attr] nodes' indexes may differ among browsers. To be
  /// more
  /// specific, `attributes` is a key/value pair of strings that represents any
  /// information regarding that attribute.
  NamedNodeMap get attributes {
    unsupportedPlatformError();
  }

  /// The `Element.shadowRoot` read-only property
  /// represents the shadow root hosted by the element.
  ///
  /// Use [Element.attachShadow] to add a shadow root to an existing element.
  ShadowRoot? get shadowRoot {
    unsupportedPlatformError();
  }

  /// The **`part`** property of the [Element] interface
  /// represents the part identifier(s) of the element (i.e. set using the
  /// `part`
  /// attribute), returned as a [DOMTokenList]. These can be used to style parts
  /// of a shadow DOM, via the  pseudo-element.
  DOMTokenList get part {
    unsupportedPlatformError();
  }

  /// The **`Element.scrollTop`** property gets or sets the number of pixels by
  /// which an element's content is scrolled from its top edge. This value is
  /// subpixel precise in modern browsers, meaning that it isn't necessarily a
  /// whole number.
  double get scrollTop {
    unsupportedPlatformError();
  }

  set scrollTop(num value) {
    unsupportedPlatformError();
  }

  /// The **`Element.scrollLeft`** property gets or sets the number of pixels by
  /// which an element's content is scrolled from its left edge. This value is
  /// subpixel precise in modern browsers, meaning that it isn't necessarily a
  /// whole number.
  double get scrollLeft {
    unsupportedPlatformError();
  }

  set scrollLeft(num value) {
    unsupportedPlatformError();
  }

  /// The **`Element.scrollWidth`** read-only property is a
  /// measurement of the width of an element's content, including content not
  /// visible on the
  /// screen due to overflow.
  ///
  /// The `scrollWidth` value is equal to the minimum width the element would
  /// require in order to fit all the content in the viewport without using a
  /// horizontal
  /// scrollbar. The width is measured in the same way as [Element.clientWidth]:
  /// it includes the element's padding, but not its border, margin or
  /// vertical scrollbar (if present). It can also include the width of
  /// pseudo-elements such
  /// as  or . If the element's content can fit
  /// without a need for horizontal scrollbar, its `scrollWidth` is equal to
  /// [Element.clientWidth]
  ///
  /// > **Note:** This property will round the value to an integer. If you need
  /// > a fractional value,
  /// > use [element.getBoundingClientRect].
  int get scrollWidth {
    unsupportedPlatformError();
  }

  /// The **`Element.scrollHeight`** read-only property is a
  /// measurement of the height of an element's content, including content not
  /// visible on the
  /// screen due to overflow.
  ///
  /// ![The user's viewport is an element with four regions labeled padding-top,
  /// border-top, border-bottom, padding-bottom. The scroll height goes from the
  /// container's padding top to the end of the padding bottom, well beyond the
  /// top and bottom of the viewport.](scrollheight.png)
  ///
  /// The `scrollHeight` value is equal to the minimum height the element would
  /// require in order to fit all the content in the viewport without using a
  /// vertical
  /// scrollbar. The height is measured in the same way as
  /// [Element.clientHeight]:
  /// it includes the element's padding, but not its border, margin or
  /// horizontal scrollbar (if present). It can also include the height of
  /// pseudo-elements
  /// such as  or . If the element's content can
  /// fit without a need for vertical scrollbar, its `scrollHeight` is equal to
  /// [Element.clientHeight]
  ///
  /// > **Note:** This property will round the value to an integer. If you need
  /// > a fractional value, use
  /// > [Element.getBoundingClientRect].
  int get scrollHeight {
    unsupportedPlatformError();
  }

  /// The width of the top border of an element in pixels. It is a read-only,
  /// integer
  /// property of element.
  ///
  /// As it happens, all that lies between the two locations (`offsetTop` and
  /// client area top) is the element's border. This is because the `offsetTop`
  /// indicates the location of the top of the border (not the margin) while the
  /// client area
  /// starts immediately below the border, (client area includes padding.)
  /// Therefore, the
  /// **clientTop** value will always equal the integer portion of the
  /// `.getComputedStyle()` value for "border-top-width". (Actually might be
  /// Math.round(parseFloat()).) For example, if the computed "border-top-width"
  /// is zero,
  /// then **`clientTop`** is also zero.
  ///
  /// > **Note:** This property will round the value to an integer. If you
  /// > need a fractional value, use [element.getBoundingClientRect].
  int get clientTop {
    unsupportedPlatformError();
  }

  /// The width of the left border of an element in pixels. It includes the
  /// width of the
  /// vertical scrollbar if the text direction of the element is right-to-left
  /// and if there
  /// is an overflow causing a left vertical scrollbar to be rendered.
  /// `clientLeft` does not include the left margin or the left padding.
  /// `clientLeft` is read-only.
  ///
  /// > **Note:** This property will round the value to an integer. If you
  /// > need a fractional value, use [element.getBoundingClientRect].
  ///
  /// > **Note:** When an element has
  /// > `display: inline`, `clientLeft` returns `0`
  /// > regardless of the element's border.
  int get clientLeft {
    unsupportedPlatformError();
  }

  /// The **`Element.clientWidth`** property is zero for inline
  /// elements and elements with no CSS; otherwise, it's the inner width of an
  /// element in
  /// pixels. It includes padding but excludes borders, margins, and vertical
  /// scrollbars (if
  /// present).
  ///
  /// When `clientWidth` is used on the root element (the
  /// `<html>` element), (or on `<body>` if the document is
  /// in quirks mode), the viewport's width (excluding any scrollbar) is
  /// returned.
  /// [This is a special case of `clientWidth`](https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth).
  ///
  /// > **Note:** This property will round the value to an integer. If you need
  /// > a fractional value, use [element.getBoundingClientRect].
  int get clientWidth {
    unsupportedPlatformError();
  }

  /// The **`Element.clientHeight`** read-only property is zero for
  /// elements with no CSS or inline layout boxes; otherwise, it's the inner
  /// height of an
  /// element in pixels. It includes padding but excludes borders, margins, and
  /// horizontal
  /// scrollbars (if present).
  ///
  /// `clientHeight` can be calculated as: CSS `height` + CSS
  /// `padding` - height of horizontal scrollbar (if present).
  ///
  /// When `clientHeight` is used on the root element (the
  /// `<html>` element), (or on `<body>` if the document is
  /// in quirks mode), the viewport's height (excluding any scrollbar) is
  /// returned.
  /// [This is a special case of `clientHeight`](https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight).
  ///
  /// > **Note:** This property will round the value to an integer. If you need
  /// > a fractional value, use [element.getBoundingClientRect].
  int get clientHeight {
    unsupportedPlatformError();
  }

  EventHandler get onfullscreenchange {
    unsupportedPlatformError();
  }

  set onfullscreenchange(EventHandler value) {
    unsupportedPlatformError();
  }

  EventHandler get onfullscreenerror {
    unsupportedPlatformError();
  }

  set onfullscreenerror(EventHandler value) {
    unsupportedPlatformError();
  }

  /// The [Element] property **`innerHTML`** gets or sets the HTML or XML markup
  /// contained within the element.
  ///
  /// More precisely, `innerHTML` gets a serialization of the nested child DOM
  /// elements within the element, or sets HTML or XML that should be parsed to
  /// replace the DOM tree within the element.
  ///
  /// To insert the HTML into the document rather than replace the contents of
  /// an element, use the method [Element.insertAdjacentHTML].
  ///
  /// The serialization of the DOM tree read from the property does not include
  /// — if you want to get a HTML string that includes shadow roots, you must
  /// instead use the [Element.getHTML] or [ShadowRoot.getHTML] methods.
  /// Similarly, when setting element content using `innerHTML`, the HTML string
  /// is parsed into DOM elements that do not contain shadow roots.
  ///
  /// So for example
  /// [`<template>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template)
  /// is parsed into as [HTMLTemplateElement], whether or not the
  /// [`shadowrootmode`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template#shadowrootmode)
  /// attribute is specfied
  /// In order to set an element's contents from an HTML string that includes
  /// declarative shadow roots, you must use either [Element.setHTMLUnsafe] or
  /// [ShadowRoot.setHTMLUnsafe].
  JSAny get innerHTML {
    unsupportedPlatformError();
  }

  set innerHTML(JSAny value) {
    unsupportedPlatformError();
  }

  /// The **`outerHTML`** attribute of the [Element]
  /// DOM interface gets the serialized HTML fragment describing the element
  /// including its
  /// descendants. It can also be set to replace the element with nodes parsed
  /// from the given
  /// string.
  ///
  /// To only obtain the HTML representation of the contents of an element, or
  /// to replace the
  /// contents of an element, use the [Element.innerHTML] property
  /// instead.
  JSAny get outerHTML {
    unsupportedPlatformError();
  }

  set outerHTML(JSAny value) {
    unsupportedPlatformError();
  }

  /// The read-only **`children`** property returns a live [HTMLCollection]
  /// which contains all of the child [Element] of the element upon which it was
  /// called.
  ///
  /// `Element.children` includes only element nodes. To get all child nodes,
  /// including non-element nodes like text and comment nodes, use
  /// [Node.childNodes].
  HTMLCollection get children {
    unsupportedPlatformError();
  }

  /// The **`Element.firstElementChild`** read-only property
  /// returns an element's first child [Element], or `null` if there
  /// are no child elements.
  ///
  /// `Element.firstElementChild` includes only element nodes.
  /// To get all child nodes, including non-element nodes like text and comment
  /// nodes, use [Node.firstChild].
  Element? get firstElementChild {
    unsupportedPlatformError();
  }

  /// The **`Element.lastElementChild`** read-only property
  /// returns an element's last child [Element], or `null` if there
  /// are no child elements.
  ///
  /// `Element.lastElementChild` includes only element nodes.
  /// To get all child nodes, including non-element nodes like text and comment
  /// nodes, use [Node.lastChild].
  Element? get lastElementChild {
    unsupportedPlatformError();
  }

  /// The **`Element.childElementCount`** read-only property
  /// returns the number of child elements of this element.
  int get childElementCount {
    unsupportedPlatformError();
  }

  /// The **`Element.previousElementSibling`**
  /// read-only property returns the [Element] immediately prior to the
  /// specified
  /// one in its parent's children list, or `null` if the specified element is
  /// the first one in the list.
  Element? get previousElementSibling {
    unsupportedPlatformError();
  }

  /// The **`Element.nextElementSibling`** read-only
  /// property returns the element immediately following the specified one in
  /// its parent's
  /// children list, or `null` if the specified element is the last one in the
  /// list.
  Element? get nextElementSibling {
    unsupportedPlatformError();
  }

  /// The **`assignedSlot`** read-only
  /// property of the [Element] interface returns an
  /// [HTMLSlotElement] representing the `slot` element the
  /// node is inserted in.
  HTMLSlotElement? get assignedSlot {
    unsupportedPlatformError();
  }

  String? get role {
    unsupportedPlatformError();
  }

  set role(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaAtomic`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-atomic`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-atomic)
  /// attribute, which indicates whether assistive technologies will present
  /// all, or only parts of, the changed region based on the change
  /// notifications defined by the
  /// [`aria-relevant`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-relevant)
  /// attribute.
  String? get ariaAtomic {
    unsupportedPlatformError();
  }

  set ariaAtomic(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaAutoComplete`** property of the [Element] interface reflects
  /// the value of the
  /// [`aria-autocomplete`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-autocomplete)
  /// attribute, which indicates whether inputting text could trigger display of
  /// one or more predictions of the user's intended value for a combobox,
  /// searchbox, or textbox and specifies how predictions would be presented if
  /// they were made.
  String? get ariaAutoComplete {
    unsupportedPlatformError();
  }

  set ariaAutoComplete(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaBrailleLabel`** property of the [Element] interface reflects
  /// the value of the
  /// [`aria-braillelabel`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-braillelabel)
  /// attribute, which defines the ARIA braille label of the element.
  ///
  /// This element label may be used by assistive technologies that can present
  /// content in braille, but should only be set if a braille-specific label
  /// would improve the user experience.
  /// The
  /// [`aria-braillelabel`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-braillelabel)
  /// contains additional information about when the property should be set.
  String? get ariaBrailleLabel {
    unsupportedPlatformError();
  }

  set ariaBrailleLabel(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaBrailleRoleDescription`** property of the [Element] interface
  /// reflects the value of the
  /// [`aria-brailleroledescription`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-brailleroledescription)
  /// attribute, which defines the ARIA braille role description of the element.
  ///
  /// This property may be used to provide an abbreviated version of the
  /// [`aria-roledescription`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-roledescription)
  /// value.
  /// It should only be used if `aria-roledescription` is present and in the
  /// rare case where it is is too verbose for braille.
  /// The
  /// [`aria-brailleroledescription`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-brailleroledescription)
  /// contains additional information about when the property should be set.
  String? get ariaBrailleRoleDescription {
    unsupportedPlatformError();
  }

  set ariaBrailleRoleDescription(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaBusy`** property of the [Element] interface reflects the value
  /// of the
  /// [`aria-busy`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-busy)
  /// attribute, which indicates whether an element is being modified, as
  /// assistive technologies may want to wait until the modifications are
  /// complete before exposing them to the user.
  String? get ariaBusy {
    unsupportedPlatformError();
  }

  set ariaBusy(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaChecked`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-checked`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-checked)
  /// attribute, which indicates the current "checked" state of checkboxes,
  /// radio buttons, and other widgets that have a checked state.
  ///
  /// > **Note:** Where possible use an HTML `input` element with
  /// > `type="checkbox"` as this element has built in semantics and does not
  /// > require ARIA attributes.
  String? get ariaChecked {
    unsupportedPlatformError();
  }

  set ariaChecked(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaColCount`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-colcount`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-colcount)
  /// attribute, which defines the number of columns in a table, grid, or
  /// treegrid.
  String? get ariaColCount {
    unsupportedPlatformError();
  }

  set ariaColCount(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaColIndex`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-colindex`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-colindex)
  /// attribute, which defines an element's column index or position with
  /// respect to the total number of columns within a table, grid, or treegrid.
  String? get ariaColIndex {
    unsupportedPlatformError();
  }

  set ariaColIndex(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaColSpan`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-colspan`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-colspan)
  /// attribute, which defines the number of columns spanned by a cell or
  /// gridcell within a table, grid, or treegrid.
  String? get ariaColSpan {
    unsupportedPlatformError();
  }

  set ariaColSpan(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaCurrent`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-current`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)
  /// attribute, which indicates the element that represents the current item
  /// within a container or set of related elements.
  String? get ariaCurrent {
    unsupportedPlatformError();
  }

  set ariaCurrent(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaDescription`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-description`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-description)
  /// attribute, which defines a string value that describes or annotates the
  /// current element.
  String? get ariaDescription {
    unsupportedPlatformError();
  }

  set ariaDescription(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaDisabled`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-disabled`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-disabled)
  /// attribute, which indicates that the element is perceivable but disabled,
  /// so it is not editable or otherwise operable.
  ///
  /// > **Note:** Where possible, use the `input` element with `type="button"`
  /// > or the `button` element — because those elements have built in semantics
  /// > and do not require ARIA attributes.
  String? get ariaDisabled {
    unsupportedPlatformError();
  }

  set ariaDisabled(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaExpanded`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-expanded`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded)
  /// attribute, which indicates whether a grouping element owned or controlled
  /// by this element is expanded or collapsed.
  String? get ariaExpanded {
    unsupportedPlatformError();
  }

  set ariaExpanded(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaHasPopup`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-haspopup`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup)
  /// attribute, which indicates the availability and type of interactive popup
  /// element, such as menu or dialog, that can be triggered by an element.
  String? get ariaHasPopup {
    unsupportedPlatformError();
  }

  set ariaHasPopup(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaHidden`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-hidden`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden))
  /// attribute, which indicates whether the element is exposed to an
  /// accessibility API.
  String? get ariaHidden {
    unsupportedPlatformError();
  }

  set ariaHidden(String? value) {
    unsupportedPlatformError();
  }

  String? get ariaInvalid {
    unsupportedPlatformError();
  }

  set ariaInvalid(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaKeyShortcuts`** property of the [Element] interface reflects
  /// the value of the `aria-keyshortcuts` attribute, which indicates keyboard
  /// shortcuts that an author has implemented to activate or give focus to an
  /// element.
  String? get ariaKeyShortcuts {
    unsupportedPlatformError();
  }

  set ariaKeyShortcuts(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaLabel`** property of the [Element] interface reflects the value
  /// of the
  /// [`aria-label`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)
  /// attribute, which defines a string value that labels the current element.
  String? get ariaLabel {
    unsupportedPlatformError();
  }

  set ariaLabel(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaLevel`** property of the [Element] interface reflects the value
  /// of the `aria-level` attribute, which defines the hierarchical level of an
  /// element within a structure.
  ///
  /// > **Note:** Where possible use an HTML `h1` or other correct heading level
  /// > as these have built in semantics and do not require ARIA attributes.
  String? get ariaLevel {
    unsupportedPlatformError();
  }

  set ariaLevel(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaLive`** property of the [Element] interface reflects the value
  /// of the
  /// [`aria-live`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live)
  /// attribute, which indicates that an element will be updated, and describes
  /// the types of updates the user agents, assistive technologies, and user can
  /// expect from the
  /// [live region](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions).
  String? get ariaLive {
    unsupportedPlatformError();
  }

  set ariaLive(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaModal`** property of the [Element] interface reflects the value
  /// of the `aria-modal` attribute, which indicates whether an element is modal
  /// when displayed. Applying the `aria-modal` property to an element with
  /// `role="dialog"` replaces the technique of using aria-hidden on the
  /// background for informing assistive technologies that content outside a
  /// dialog is inert.
  String? get ariaModal {
    unsupportedPlatformError();
  }

  set ariaModal(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaMultiLine`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-multiline`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-multiline)
  /// attribute, which indicates whether a text box accepts multiple lines of
  /// input or only a single line.
  ///
  /// > **Note:** Where possible use an HTML `input` element with `type="text"`
  /// > or a `textarea` as these have built in semantics and do not require ARIA
  /// > attributes.
  String? get ariaMultiLine {
    unsupportedPlatformError();
  }

  set ariaMultiLine(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaMultiSelectable`** property of the [Element] interface reflects
  /// the value of the
  /// [`aria-multiselectable`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-multiselectable)
  /// attribute, which indicates that the user may select more than one item
  /// from the current selectable descendants.
  ///
  /// > **Note:** Where possible use an HTML `select` element as this has built
  /// > in semantics and does not require ARIA attributes.
  String? get ariaMultiSelectable {
    unsupportedPlatformError();
  }

  set ariaMultiSelectable(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaOrientation`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-orientation`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-orientation)
  /// attribute, which indicates whether the element's orientation is
  /// horizontal, vertical, or unknown/ambiguous.
  String? get ariaOrientation {
    unsupportedPlatformError();
  }

  set ariaOrientation(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaPlaceholder`** property of the [Element] interface reflects the
  /// value of the `aria-placeholder` attribute, which defines a short hint
  /// intended to aid the user with data entry when the control has no value.
  ///
  /// > **Note:** Where possible use an HTML `input` element with `type="text"`
  /// > or a `textarea` as these have built in semantics and do not require ARIA
  /// > attributes.
  String? get ariaPlaceholder {
    unsupportedPlatformError();
  }

  set ariaPlaceholder(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaPosInSet`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-posinset`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-posinset)
  /// attribute, which defines an element's number or position in the current
  /// set of listitems or treeitems.
  String? get ariaPosInSet {
    unsupportedPlatformError();
  }

  set ariaPosInSet(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaPressed`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-pressed`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-pressed)
  /// attribute, which indicates the current "pressed" state of toggle buttons.
  ///
  /// > **Note:** Where possible use an HTML `input` element with
  /// > `type="button"` or the `button` element as these have built in semantics
  /// > and do not require ARIA attributes.
  String? get ariaPressed {
    unsupportedPlatformError();
  }

  set ariaPressed(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaReadOnly`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-readonly`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-readonly)
  /// attribute, which indicates that the element is not editable, but is
  /// otherwise operable.
  ///
  /// > **Note:** Where possible use an HTML `input` element with `type="text"`
  /// > or a `textarea` as these have built in semantics and do not require ARIA
  /// > attributes.
  String? get ariaReadOnly {
    unsupportedPlatformError();
  }

  set ariaReadOnly(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaRequired`** property of the [Element] interface reflects the
  /// value of the `aria-required` attribute, which indicates that user input is
  /// required on the element before a form may be submitted.
  ///
  /// > **Note:** Where possible use an HTML `input` element with `type="text"`
  /// > or a `textarea` as these have built in semantics and do not require ARIA
  /// > attributes.
  String? get ariaRequired {
    unsupportedPlatformError();
  }

  set ariaRequired(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaRoleDescription`** property of the [Element] interface reflects
  /// the value of the
  /// [`aria-roledescription`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-roledescription)
  /// attribute, which defines a human-readable, author-localized description
  /// for the role of an element.
  String? get ariaRoleDescription {
    unsupportedPlatformError();
  }

  set ariaRoleDescription(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaRowCount`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-rowcount`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-rowcount)
  /// attribute, which defines the total number of rows in a table, grid, or
  /// treegrid.
  String? get ariaRowCount {
    unsupportedPlatformError();
  }

  set ariaRowCount(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaRowIndex`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-rowindex`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-rowindex)
  /// attribute, which defines an element's row index or position with respect
  /// to the total number of rows within a table, grid, or treegrid.
  String? get ariaRowIndex {
    unsupportedPlatformError();
  }

  set ariaRowIndex(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaRowSpan`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-rowspan`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-rowspan)
  /// attribute, which defines the number of rows spanned by a cell or gridcell
  /// within a table, grid, or treegrid.
  String? get ariaRowSpan {
    unsupportedPlatformError();
  }

  set ariaRowSpan(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaSelected`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-selected`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected)
  /// attribute, which indicates the current "selected" state of elements that
  /// have a selected state.
  String? get ariaSelected {
    unsupportedPlatformError();
  }

  set ariaSelected(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaSetSize`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-setsize`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-setsize)
  /// attribute, which defines the number of items in the current set of
  /// listitems or treeitems.
  String? get ariaSetSize {
    unsupportedPlatformError();
  }

  set ariaSetSize(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaSort`** property of the [Element] interface reflects the value
  /// of the
  /// [`aria-sort`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-sort)
  /// attribute, which indicates if items in a table or grid are sorted in
  /// ascending or descending order.
  String? get ariaSort {
    unsupportedPlatformError();
  }

  set ariaSort(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaValueMax`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-valuemax`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuemax)
  /// attribute, which defines the maximum allowed value for a range widget.
  String? get ariaValueMax {
    unsupportedPlatformError();
  }

  set ariaValueMax(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaValueMin`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-valuemin`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuemin)
  /// attribute, which defines the minimum allowed value for a range widget.
  String? get ariaValueMin {
    unsupportedPlatformError();
  }

  set ariaValueMin(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaValueNow`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-valuenow`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuenow)
  /// attribute, which defines the current value for a range widget.
  String? get ariaValueNow {
    unsupportedPlatformError();
  }

  set ariaValueNow(String? value) {
    unsupportedPlatformError();
  }

  /// The **`ariaValueText`** property of the [Element] interface reflects the
  /// value of the
  /// [`aria-valuetext`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-valuetext)
  /// attribute, which defines the human-readable text alternative of
  /// aria-valuenow for a range widget.
  String? get ariaValueText {
    unsupportedPlatformError();
  }

  set ariaValueText(String? value) {
    unsupportedPlatformError();
  }
}
extension type ShadowRootInit._(JSObject _) implements JSObject {
  factory ShadowRootInit({
    required ShadowRootMode mode,
    bool? delegatesFocus,
    SlotAssignmentMode? slotAssignment,
    bool? clonable,
    bool? serializable,
  }) {
    unsupportedPlatformError();
  }

  ShadowRootMode get mode {
    unsupportedPlatformError();
  }

  set mode(ShadowRootMode value) {
    unsupportedPlatformError();
  }

  bool get delegatesFocus {
    unsupportedPlatformError();
  }

  set delegatesFocus(bool value) {
    unsupportedPlatformError();
  }

  SlotAssignmentMode get slotAssignment {
    unsupportedPlatformError();
  }

  set slotAssignment(SlotAssignmentMode value) {
    unsupportedPlatformError();
  }

  bool get clonable {
    unsupportedPlatformError();
  }

  set clonable(bool value) {
    unsupportedPlatformError();
  }

  bool get serializable {
    unsupportedPlatformError();
  }

  set serializable(bool value) {
    unsupportedPlatformError();
  }
}

/// The **`NamedNodeMap`** interface represents a collection of [Attr] objects.
/// Objects inside a `NamedNodeMap` are not in any particular order, unlike
/// [NodeList], although they may be accessed by an index as in an array.
///
/// A `NamedNodeMap` object is _live_ and will thus be auto-updated if changes
/// are made to its contents internally or elsewhere.
///
/// > **Note:** Although called `NamedNodeMap`, this interface doesn't deal with
/// > [Node] objects but with [Attr] objects, which are a specialized class of
/// > [Node] objects.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap).
extension type NamedNodeMap._(JSObject _) implements JSObject {
  /// The **`item()`** method of the [NamedNodeMap] interface
  /// returns the item in the map matching the index.
  ///
  /// > **Note:** This method is also called when you use the operator `[]`
  /// > syntax.
  /// > So, `myMap[i]`is equivalent to `myMap.item(i)` where `i` is a number.
  Attr? item(int index) {
    unsupportedPlatformError();
  }

  /// The **`getNamedItem()`** method of the [NamedNodeMap] interface returns
  /// the [Attr] corresponding to the given name, or `null` if there is no
  /// corresponding attribute.
  ///
  /// > **Note:** This method is also called when you use the operator `[]`
  /// > syntax.
  /// > So, `myMap[str]`is equivalent to `myMap.getNamedItem(str)` where `str`
  /// > is a string.
  Attr? getNamedItem(String qualifiedName) {
    unsupportedPlatformError();
  }

  /// The **`getNamedItemNS()`** method of the [NamedNodeMap] interface returns
  /// the [Attr] corresponding to the given local name in the given namespace,
  /// or `null` if there is no corresponding attribute.
  Attr? getNamedItemNS(
    String? namespace,
    String localName,
  ) {
    unsupportedPlatformError();
  }

  /// The **`setNamedItem()`** method of the [NamedNodeMap] interface
  /// puts the [Attr] identified by its name in the map.
  /// If there is already an [Attr] with the same name in the map,
  /// it is _replaced_.
  Attr? setNamedItem(Attr attr) {
    unsupportedPlatformError();
  }

  /// The **`setNamedItemNS()`** method of the [NamedNodeMap] interface
  /// puts the [Attr] identified by its name in the map.
  /// If there was already an [Attr] with the same name in the map,
  /// it is _replaced_.
  ///
  /// > **Note:** This method is an alias of `setNamedItem()` you can use them
  /// > interchangeably.
  Attr? setNamedItemNS(Attr attr) {
    unsupportedPlatformError();
  }

  /// The **`removeNamedItem()`** method of the [NamedNodeMap] interface
  /// removes the [Attr] corresponding to the given name from the map.
  Attr removeNamedItem(String qualifiedName) {
    unsupportedPlatformError();
  }

  /// The **`removeNamedItemNS()`** method of the [NamedNodeMap] interface
  /// removes the [Attr] corresponding to the given namespace and local name
  /// from the map.
  Attr removeNamedItemNS(
    String? namespace,
    String localName,
  ) {
    unsupportedPlatformError();
  }

  /// The read-only **`length`** property of the [NamedNodeMap] interface
  /// is the number of objects stored in the map.
  int get length {
    unsupportedPlatformError();
  }
}

/// The **`Attr`** interface represents one of an element's attributes as an
/// object. In most situations, you will directly retrieve the attribute value
/// as a string (e.g., [Element.getAttribute]), but some cases may require
/// interacting with `Attr` instances (e.g., [Element.getAttributeNode]).
///
/// The core idea of an object of type `Attr` is the association between a
/// _name_ and a _value_. An attribute may also be part of a _namespace_ and, in
/// this case, it also has a URI identifying the namespace, and a prefix that is
/// an abbreviation for the namespace.
///
/// The name is deemed _local_ when it ignores the eventual namespace prefix and
/// deemed _qualified_ when it includes the prefix of the namespace, if any,
/// separated from the local name by a colon (`:`). We have three cases: an
/// attribute outside of a namespace, an attribute inside a namespace without a
/// prefix defined, an attribute inside a namespace with a prefix:
///
/// | Attribute | Namespace name | Namespace prefix | Attribute local name | Attribute qualified name |
/// | --------- | -------------- | ---------------- | -------------------- | ------------------------ |
/// | `myAttr`  | _none_         | _none_           | `myAttr`             | `myAttr`                 |
/// | `myAttr`  | `mynamespace`  | _none_           | `myAttr`             | `myAttr`                 |
/// | `myAttr`  | `mynamespace`  | `myns`           | `myAttr`             | `myns:myAttr`            |
///
/// > **Note:** This interface represents only attributes present in the tree
/// > representation of the [Element], being a SVG, an HTML or a MathML element.
/// > It doesn't represent the _property_ of an interface associated with such
/// > element, such as [HTMLTableElement] for a `table` element. (See  for more
/// > information about attributes and how they are _reflected_ into
/// > properties.)
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Attr).
extension type Attr._(JSObject _) implements Node, JSObject {
  /// The read-only **`namespaceURI`** property of the [Attr] interface returns
  /// the namespace URI of the attribute,
  /// or `null` if the element is not in a namespace.
  ///
  /// The namespace URI is set at the [Attr] creation and cannot be changed.
  /// An attribute with a namespace can be created using
  /// [Element.setAttributeNS].
  ///
  /// > **Note:** an attribute does not inherit its namespace from the element
  /// > it is attached to.
  /// > If an attribute is not explicitly given a namespace, it has no
  /// > namespace.
  ///
  /// The browser does not handle or enforce namespace validation per se. It is
  /// up to the JavaScript
  /// application to do any necessary validation. Note, too, that the namespace
  /// prefix, once it
  /// is associated with a particular attribute node, cannot be changed.
  String? get namespaceURI {
    unsupportedPlatformError();
  }

  /// The read-only **`prefix`** property of the [Attr] returns the namespace
  /// prefix of the attribute, or `null` if no prefix is specified.
  ///
  /// The prefix is always in lower case, whatever case is used at the attribute
  /// creation.
  ///
  /// > **Note:** Only XML supports namespaces. HTML does not. That means that
  /// > the prefix of an attribute of an HTML element will always be `null`.
  ///
  /// Also, only the `xml` (for the `xml:lang` attribute), `xlink` (for the
  /// `xlink:href`, `xlink:show`, `xlink:target` and `xlink:title` attributes)
  /// and `xpath` namespaces are supported, and only on SVG and MathML elements.
  String? get prefix {
    unsupportedPlatformError();
  }

  /// The read-only **`localName`** property of the [Attr] interface returns the
  /// _local part_ of the _qualified name_ of an attribute, that is the name of
  /// the attribute, stripped from any namespace in front of it. For example, if
  /// the qualified name is `xml:lang`, the returned local name is `lang`, if
  /// the element supports that namespace.
  ///
  /// The local name is always in lower case, whatever case at the attribute
  /// creation.
  ///
  /// > **Note:** HTML only supports a fixed set of namespaces on SVG and MathML
  /// > elements. These are `xml` (for the `xml:lang` attribute), `xlink` (for
  /// > the `xlink:href`, `xlink:show`, `xlink:target` and `xlink:title`
  /// > attributes) and `xpath`.
  /// >
  /// > That means that the local name of an attribute of an HTML element is
  /// > always be equal to its qualified name: Colons are treated as regular
  /// > characters. In XML, like in SVG or MathML, the colon denotes the end of
  /// > the prefix and what is before is the namespace; the local name may be
  /// > different from the qualified name.
  String get localName {
    unsupportedPlatformError();
  }

  /// The read-only **`name`** property of the [Attr] interface returns the
  /// _qualified name_ of an attribute, that is the name of the attribute, with
  /// the namespace prefix, if any, in front of it. For example, if the local
  /// name is `lang` and the namespace prefix is `xml`, the returned qualified
  /// name is `xml:lang`.
  ///
  /// The qualified name is always in lower case, whatever case at the attribute
  /// creation.
  String get name {
    unsupportedPlatformError();
  }

  /// The **`value`** property of the [Attr] interface contains the value of the
  /// attribute.
  String get value {
    unsupportedPlatformError();
  }

  set value(String value) {
    unsupportedPlatformError();
  }

  /// The read-only **`ownerElement`** property of the [Attr] interface returns
  /// the [Element] the attribute belongs to.
  Element? get ownerElement {
    unsupportedPlatformError();
  }

  /// The read-only **`specified`** property of the [Attr] interface always
  /// returns `true`.
  bool get specified {
    unsupportedPlatformError();
  }
}

/// The **`CharacterData`** abstract interface represents a [Node] object that
/// contains characters. This is an abstract interface, meaning there aren't any
/// objects of type `CharacterData`: it is implemented by other interfaces like
/// [Text], [Comment], [CDATASection], or [ProcessingInstruction], which aren't
/// abstract.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/CharacterData).
extension type CharacterData._(JSObject _) implements Node, JSObject {
  /// The **`substringData()`** method of the [CharacterData] interface
  /// returns a portion of the existing data,
  /// starting at the specified index
  /// and extending for a given number of characters afterwards.
  String substringData(
    int offset,
    int count,
  ) {
    unsupportedPlatformError();
  }

  /// The **`appendData()`** method of the [CharacterData] interface
  /// adds the provided data to the end of the node's current data.
  void appendData(String data) {
    unsupportedPlatformError();
  }

  /// The **`insertData()`** method of the [CharacterData] interface
  /// inserts the provided data into this `CharacterData` node's current data,
  /// at the provided offset from the start of the existing data.
  /// The provided data is spliced into the existing data.
  void insertData(
    int offset,
    String data,
  ) {
    unsupportedPlatformError();
  }

  /// The **`deleteData()`** method of the [CharacterData] interface
  /// removes all or part of the data from this `CharacterData` node.
  void deleteData(
    int offset,
    int count,
  ) {
    unsupportedPlatformError();
  }

  /// The **`replaceData()`** method of the [CharacterData] interface removes a
  /// certain number of characters of the existing text in a given
  /// `CharacterData` node and replaces those characters with the text provided.
  void replaceData(
    int offset,
    int count,
    String data,
  ) {
    unsupportedPlatformError();
  }

  /// The **`before()`** method of the [CharacterData] interface
  /// inserts a set of [Node] objects and strings
  /// in the children list of the `CharacterData`'s parent, just before the
  /// `CharacterData` node.
  ///
  /// Strings are inserted as [Text] nodes; the string is being passed as
  /// argument to the [Text.Text] constructor.
  void before(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`after()`** method of the [CharacterData] interface
  /// inserts a set of [Node] objects or strings in the children list of the
  /// object's parent, just after the object itself.
  ///
  /// Strings are inserted as [Text] nodes; the string is being passed as
  /// argument to the [Text.Text] constructor.
  void after(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`replaceWith()`** method of the [CharacterData] interface
  /// replaces this node in the children list of its parent
  /// with a set of [Node] objects or string.
  ///
  /// Strings are inserted as [Text] nodes; the string is being passed as
  /// argument to the [Text.Text] constructor.
  void replaceWith(JSAny nodes) {
    unsupportedPlatformError();
  }

  /// The **`remove()`** method of the [CharacterData] removes the text
  /// contained in the node.
  void remove() {
    unsupportedPlatformError();
  }

  /// The **`data`** property of the [CharacterData] interface represent the
  /// value of the current object's data.
  String get data {
    unsupportedPlatformError();
  }

  set data(String value) {
    unsupportedPlatformError();
  }

  /// The read-only **`CharacterData.length`** property
  /// returns the number of characters in the contained data, as a positive
  /// integer.
  int get length {
    unsupportedPlatformError();
  }

  /// The read-only **`previousElementSibling`** property of the [CharacterData]
  /// interface
  /// returns the first [Element] before the current node in its parent's
  /// children list,
  /// or `null` if there is none.
  Element? get previousElementSibling {
    unsupportedPlatformError();
  }

  /// The read-only **`nextElementSibling`** property of the [CharacterData]
  /// interface
  /// returns the first [Element] node following the specified one in its
  /// parent's
  /// children list, or `null` if the specified element is the last one in the
  /// list.
  Element? get nextElementSibling {
    unsupportedPlatformError();
  }
}

/// The **`Text`** interface represents a text [Node] in a DOM tree.
///
/// To understand what a text node is, consider the following document:
///
/// ```html
/// <html lang="en" class="e">
///   <head>
///     <title>Aliens?</title>
///   </head>
///   <body>
///     Why yes.
///   </body>
/// </html>
/// ```
///
/// In that document, there are five text nodes, with the following contents:
///
/// - `"\n    "` (after the `<head>` start tag, a newline followed by four
///   spaces)
/// - `"Aliens?"` (the contents of the `title` element)
/// - `"\n  "` (after the `</head>` end tag, a newline followed by two spaces)
/// - `"\n  "` (after the `<body>` start tag, a newline followed by two spaces)
/// - `"\n Why yes.\n \n\n"` (the contents of the `body` element)
///
/// Each of those text nodes is an object that has the properties and methods
/// documented in this article.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Text).
extension type Text._(JSObject _) implements CharacterData, JSObject {
  factory Text([String? data]) {
    unsupportedPlatformError();
  }

  /// The **`splitText()`** method of the [Text] interface
  /// breaks the [Text] node into two nodes at the specified offset,
  /// keeping both nodes in the tree as siblings.
  ///
  /// After the split, the current node contains all the content
  /// up to the specified offset point,
  /// and a newly created node of the same type contains the remaining text.
  /// The newly created node is returned to the caller.
  /// If the original node had a parent, the new node is inserted as the next
  /// sibling of the original node.
  /// If the offset is equal to the length of the original node,
  /// the newly created node has no data.
  ///
  /// Separated text nodes can be concatenated using the [Node.normalize]
  /// method.
  Text splitText(int offset) {
    unsupportedPlatformError();
  }

  /// The read-only **`wholeText`** property of the [Text] interface
  /// returns the full text of all [Text] nodes logically adjacent to the node.
  /// The text is concatenated in document order.
  /// This allows specifying any text node and obtaining all adjacent text as a
  /// single string.
  ///
  /// > **Note:** This is similar to call [Node.normalize] followed by reading
  /// > the text value,
  /// > but without modifying the tree.
  String get wholeText {
    unsupportedPlatformError();
  }

  /// The read-only **`assignedSlot`** property of the [Text] interface
  /// returns the [HTMLSlotElement] object associated with the element.
  HTMLSlotElement? get assignedSlot {
    unsupportedPlatformError();
  }
}

/// The **`CDATASection`** interface represents a CDATA section
/// that can be used within XML to include extended portions of unescaped text.
/// When inside a CDATA section, the symbols `<` and `&` don't need escaping
/// as they normally do.
///
/// In XML, a CDATA section looks like:
///
/// ```xml
/// <![CDATA[ … ]]>
/// ```
///
/// For example:
///
/// ```xml
/// <foo>
///   Here is a CDATA section: <![CDATA[ < > & ]]> with all kinds of unescaped text.
/// </foo>
/// ```
///
/// The only sequence which is not allowed within a CDATA section is the closing
/// sequence
/// of a CDATA section itself, `]]>`.
///
/// > **Note:** CDATA sections should not be used within HTML they are
/// > considered as comments and not displayed.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/CDATASection).
extension type CDATASection._(JSObject _) implements Text, JSObject {}

/// The **`ProcessingInstruction`** interface represents a
/// [processing instruction](https://www.w3.org/TR/xml/#sec-pi); that is, a
/// [Node] which embeds an instruction targeting a specific application but that
/// can be ignored by any other applications which don't recognize the
/// instruction.
///
/// > **Warning:** `ProcessingInstruction` nodes are only supported in XML
/// > documents, not in HTML documents. In these, a process instruction will be
/// > considered as a comment and be represented as a [Comment] object in the
/// > tree.
///
/// A processing instruction may be different than the
/// [XML declaration](https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction#xml_declaration).
///
/// > **Note:** User-defined processing instructions cannot begin with "`xml`",
/// > as `xml`-prefixed processing-instruction target names are reserved by the
/// > XML specification for particular, standard uses (see, for example,
/// > `<?xml-stylesheet ?>`.
///
/// For example:
///
/// ```html
/// <?xml version="1.0"?>
/// ```
///
/// is a processing instruction whose `target` is `xml`.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction).
extension type ProcessingInstruction._(JSObject _)
    implements CharacterData, JSObject {
  /// The read-only **`target`** property of the [ProcessingInstruction]
  /// interface
  /// represent the application to which the `ProcessingInstruction` is
  /// targeted.
  ///
  /// For example:
  ///
  /// ```html
  /// <?xml version="1.0"?>
  /// ```
  ///
  /// is a processing instruction whose `target` is `xml`.
  String get target {
    unsupportedPlatformError();
  }

  /// The read-only **`sheet`** property of the [ProcessingInstruction]
  /// interface
  /// contains the stylesheet associated to the `ProcessingInstruction`.
  ///
  /// The `xml-stylesheet` processing instruction is used to associate a
  /// stylesheet in an XML file.
  CSSStyleSheet? get sheet {
    unsupportedPlatformError();
  }
}

/// The **`Comment`** interface represents textual notations within markup;
/// although it is generally not visually shown, such comments are available to
/// be read in the source view.
///
/// Comments are represented in HTML and XML as content between '`<!--`' and
/// '`-->`'. In XML, like inside SVG or MathML markup, the character sequence
/// '`--`' cannot be used within a comment.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Comment).
extension type Comment._(JSObject _) implements CharacterData, JSObject {
  factory Comment([String? data]) {
    unsupportedPlatformError();
  }
}

/// The **`AbstractRange`** abstract interface is the base class upon which all
/// range types are defined. A **range** is an object that indicates the start
/// and end points of a section of content within the document.
///
/// > **Note:** As an abstract interface, you will not directly instantiate an
/// > object of type `AbstractRange`. Instead, you will use the [Range] or
/// > [StaticRange] interfaces. To understand the difference between those two
/// > interfaces, and how to choose which is appropriate for your needs, consult
/// > each interface's documentation.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange).
extension type AbstractRange._(JSObject _) implements JSObject {
  /// The read-only **`startContainer`** property of the [AbstractRange]
  /// interface returns the start [Node] for the range.
  Node get startContainer {
    unsupportedPlatformError();
  }

  /// The read-only **`startOffset`** property of the [AbstractRange] interface
  /// returns the offset into the start node of the range's start position.
  int get startOffset {
    unsupportedPlatformError();
  }

  /// The read-only **`endContainer`** property of the [AbstractRange] interface
  /// returns the [Node] in which the end of the range is located.
  Node get endContainer {
    unsupportedPlatformError();
  }

  /// The **`endOffset`** property of the [AbstractRange] interface returns the
  /// offset into the end node of the range's end position.
  int get endOffset {
    unsupportedPlatformError();
  }

  /// The read-only **`collapsed`** property of the [AbstractRange] interface
  /// returns `true` if the range's start position and end position are the
  /// same.
  bool get collapsed {
    unsupportedPlatformError();
  }
}
extension type StaticRangeInit._(JSObject _) implements JSObject {
  factory StaticRangeInit({
    required Node startContainer,
    required int startOffset,
    required Node endContainer,
    required int endOffset,
  }) {
    unsupportedPlatformError();
  }

  Node get startContainer {
    unsupportedPlatformError();
  }

  set startContainer(Node value) {
    unsupportedPlatformError();
  }

  int get startOffset {
    unsupportedPlatformError();
  }

  set startOffset(int value) {
    unsupportedPlatformError();
  }

  Node get endContainer {
    unsupportedPlatformError();
  }

  set endContainer(Node value) {
    unsupportedPlatformError();
  }

  int get endOffset {
    unsupportedPlatformError();
  }

  set endOffset(int value) {
    unsupportedPlatformError();
  }
}

/// The
/// [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)
/// **`StaticRange`** interface extends [AbstractRange] to provide a method to
/// specify a range of content in the DOM whose contents don't update to reflect
/// changes which occur within the DOM tree.
///
/// This interface offers the same set of properties and methods as
/// `AbstractRange`.
///
/// `AbstractRange` and `StaticRange` are not available from
/// [web workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API).
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/StaticRange).
extension type StaticRange._(JSObject _) implements AbstractRange, JSObject {
  factory StaticRange(StaticRangeInit init) {
    unsupportedPlatformError();
  }
}

/// The **`Range`** interface represents a fragment of a document that can
/// contain nodes and parts of text nodes.
///
/// A range can be created by using the [Document.createRange] method. Range
/// objects can also be retrieved by using the [Selection.getRangeAt] method of
/// the [Selection] object or the [Document.caretRangeFromPoint] method of the
/// [Document] object.
///
/// There also is the [Range.Range] constructor available.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Range).
extension type Range._(JSObject _) implements AbstractRange, JSObject {
  factory Range() {
    unsupportedPlatformError();
  }

  static const int START_TO_START = 0;

  static const int START_TO_END = 1;

  static const int END_TO_END = 2;

  static const int END_TO_START = 3;

  /// The **`Range.setStart()`** method sets the start position of a
  /// [Range].
  ///
  /// If the `startNode` is a [Node] of type [Text],
  /// [Comment], or [CDataSection], then `startOffset` is
  /// the number of characters from the start of `startNode`. For other
  /// `Node` types, `startOffset` is the number of child nodes between
  /// the start of the `startNode`.
  ///
  /// Setting the start point below (lower in the document) the end point will
  /// result in a
  /// collapsed range with the start and end points both set to the specified
  /// start position.
  void setStart(
    Node node,
    int offset,
  ) {
    unsupportedPlatformError();
  }

  /// The **`Range.setEnd()`** method sets the end position of a [Range] to be
  /// located at the given offset into the specified node x.Setting
  /// the end point above (higher in the document) than the start point will
  /// result in a
  /// collapsed range with the start and end points both set to the specified
  /// end position.
  void setEnd(
    Node node,
    int offset,
  ) {
    unsupportedPlatformError();
  }

  /// The **`Range.setStartBefore()`** method sets the start position
  /// of a [Range] relative to another [Node]. The parent
  /// [Node] of the start of the [Range] will be the same as that
  /// for the `referenceNode`.
  void setStartBefore(Node node) {
    unsupportedPlatformError();
  }

  /// The **`Range.setStartAfter()`** method sets the start position
  /// of a [Range] relative to a [Node]. The parent
  /// [Node] of the start of the [Range] will be the same as that
  /// for the `referenceNode`.
  void setStartAfter(Node node) {
    unsupportedPlatformError();
  }

  /// The **`Range.setEndBefore()`** method sets the end position of
  /// a `Range` relative to another [Node]. The parent
  /// `Node` of end of the `Range` will be the same as that for the
  /// `referenceNode`.
  void setEndBefore(Node node) {
    unsupportedPlatformError();
  }

  /// The **`Range.setEndAfter()`** method sets the end position of a
  /// [Range] relative to another [Node]. The parent
  /// `Node` of end of the `Range` will be the same as that for the
  /// `referenceNode`.
  void setEndAfter(Node node) {
    unsupportedPlatformError();
  }

  /// The **`Range.collapse()`** method collapses the
  /// [Range] to one of its boundary points.
  ///
  /// A collapsed [Range] is empty, containing no content, specifying a
  /// single-point in a DOM tree. To determine if a [Range] is already
  /// collapsed,
  /// see the [Range.collapsed] property.
  void collapse([bool? toStart]) {
    unsupportedPlatformError();
  }

  /// The **`Range.selectNode()`** method sets the
  /// [Range] to contain the [Node] and its contents. The parent
  /// [Node] of the start and end of the [Range] will be the same as
  /// the parent of the _referenceNode_.
  void selectNode(Node node) {
    unsupportedPlatformError();
  }

  /// The **`Range.selectNodeContents()`** method sets the [Range] to contain
  /// the contents of a [Node].
  ///
  /// The parent `Node` of the start and end of the `Range` will be the
  /// reference node. The `startOffset` is 0, and the `endOffset` is the
  /// number of child `Node`s or number of characters contained in the reference
  /// node.
  void selectNodeContents(Node node) {
    unsupportedPlatformError();
  }

  /// The
  /// **`Range.compareBoundaryPoints()`** method compares the
  /// boundary points of the [Range] with those of another range.
  int compareBoundaryPoints(
    int how,
    Range sourceRange,
  ) {
    unsupportedPlatformError();
  }

  /// The **`Range.deleteContents()`** method removes the contents of
  /// the [Range] from the [Document].
  ///
  /// Unlike [Range.extractContents], this method does not return a
  /// [DocumentFragment] containing the deleted content.
  void deleteContents() {
    unsupportedPlatformError();
  }

  /// The **`Range.extractContents()`** method moves contents of the
  /// [Range] from the document tree into a [DocumentFragment].
  ///
  /// Event listeners added using DOM Events are not retained during extraction.
  /// HTML
  /// attribute events are retained or duplicated as they are for the
  /// [Node.cloneNode] method. HTML `id` attributes are also cloned,
  /// which can lead to an invalid document if a partially-selected node is
  /// extracted and
  /// appended to the document.
  ///
  /// Partially selected nodes are cloned to include the parent tags necessary
  /// to make the
  /// document fragment valid.
  DocumentFragment extractContents() {
    unsupportedPlatformError();
  }

  /// The **`Range.cloneContents()`** returns a [DocumentFragment] copying the
  /// objects of type [Node]
  /// included in the [Range].
  ///
  /// Event listeners added using [EventTarget.addEventListener]
  /// are not copied during cloning. HTML attribute events are duplicated as
  /// they are
  /// for the [Node.cloneNode] method. HTML `id` attributes
  /// are also cloned, which can lead to an invalid document through cloning.
  ///
  /// Partially selected nodes include the parent tags necessary to make the
  /// document
  /// fragment valid.
  DocumentFragment cloneContents() {
    unsupportedPlatformError();
  }

  /// The **`Range.insertNode()`** method inserts a node at the start
  /// of the [Range].
  ///
  /// The new node is inserted at the start boundary point of the `Range`. If
  /// the
  /// new node is to be added to a text [Node], that `Node` is split
  /// at the insertion point, and the insertion occurs between the two text
  /// nodes.
  ///
  /// If the new node is a document fragment, the children of the document
  /// fragment are
  /// inserted instead.
  void insertNode(Node node) {
    unsupportedPlatformError();
  }

  /// The **`Range.surroundContents()`** method moves content of the
  /// [Range] into a new node, placing the new node at the start of the
  /// specified range.
  ///
  /// This method is nearly equivalent to
  /// `newNode.appendChild(range.extractContents()); range.insertNode(newNode)`.
  /// After surrounding, the boundary points of the `range` include
  /// `newNode`.
  ///
  /// An exception will be thrown, however, if the [Range] splits a non-[Text]
  /// node with only one of its boundary points. That is, unlike the
  /// alternative above, if there are partially selected nodes, they will not be
  /// cloned and
  /// instead the operation will fail.
  void surroundContents(Node newParent) {
    unsupportedPlatformError();
  }

  /// The **`Range.cloneRange()`** method returns a
  /// [Range] object with boundary points identical to the cloned
  /// [Range].
  ///
  /// The returned clone is copied by value, not reference, so a change in
  /// either
  /// [Range] does not affect the other.
  Range cloneRange() {
    unsupportedPlatformError();
  }

  /// The **`Range.detach()`** method does nothing. It used to
  /// disable the [Range] object and enable the browser to release associated
  /// resources. The method has been kept for compatibility.
  void detach() {
    unsupportedPlatformError();
  }

  /// The **`Range.isPointInRange()`** method returns a boolean
  /// indicating whether the given point is in the [Range]. It returns
  /// `true` if the point (cursor position) at `offset` within
  /// `ReferenceNode` is within this range.
  bool isPointInRange(
    Node node,
    int offset,
  ) {
    unsupportedPlatformError();
  }

  /// The **`Range.comparePoint()`** method returns `-1`,
  /// `0`, or `1` depending on whether the `referenceNode` is
  /// before, the same as, or after the [Range].
  ///
  /// If the _reference node_ is a [Node] of type [Text],
  /// [Comment], or [CDATASection], then offset is the number of
  /// characters from the start of _reference node_. For other [Node]
  /// types, offset is the number of child nodes between the start of the
  /// _reference
  /// node_.
  int comparePoint(
    Node node,
    int offset,
  ) {
    unsupportedPlatformError();
  }

  /// The **`Range.intersectsNode()`** method returns a boolean
  /// indicating whether the given [Node] intersects the [Range].
  bool intersectsNode(Node node) {
    unsupportedPlatformError();
  }

  /// The **`Range.getClientRects()`** method returns a list of [DOMRect]
  /// objects representing the area of the screen occupied by the
  /// [range](https://developer.mozilla.org/en-US/docs/Web/API/Range). This is
  /// created by aggregating the results of calls to
  /// [Element.getClientRects] for all the elements in the range.
  DOMRectList getClientRects() {
    unsupportedPlatformError();
  }

  /// The **`Range.getBoundingClientRect()`** method returns a [DOMRect] object
  /// that bounds the contents of the range; this is a rectangle
  /// enclosing the union of the bounding rectangles for all the elements in the
  /// range.
  ///
  /// This method is useful for determining the viewport coordinates of the
  /// cursor or
  /// selection inside a text box. See [Element.getBoundingClientRect] for
  /// details on the returned value.
  DOMRect getBoundingClientRect() {
    unsupportedPlatformError();
  }

  /// The **`Range.createContextualFragment()`** method returns a
  /// [DocumentFragment] by invoking the HTML fragment parsing algorithm or the
  /// XML fragment parsing algorithm with the start of the range (the _parent_
  /// of the
  /// selected node) as the context node. The HTML fragment parsing algorithm is
  /// used if the
  /// range belongs to a `Document` whose HTMLness bit is set. In the HTML case,
  /// if
  /// the context node would be `html`, for historical reasons the fragment
  /// parsing
  /// algorithm is invoked with `body` as the context instead.
  DocumentFragment createContextualFragment(JSAny string) {
    unsupportedPlatformError();
  }

  /// The **`Range.commonAncestorContainer`** read-only property
  /// returns the deepest — or furthest down the document tree — [Node] that
  /// contains both
  /// [boundary points](https://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position-h3)
  /// of the [Range]. This means that if
  /// [Range.startContainer] and [Range.endContainer] both refer to
  /// the same node, this node is the **common ancestor container**.
  ///
  /// Since a `Range` need not be continuous, and may also partially select
  /// nodes,
  /// this is a convenient way to find a `Node` which encloses a
  /// `Range`.
  ///
  /// This property is read-only. To change the ancestor container of a `Node`,
  /// consider using the various methods available to set the start and end
  /// positions of the
  /// `Range`, such as [Range.setStart] and
  /// [Range.setEnd].
  Node get commonAncestorContainer {
    unsupportedPlatformError();
  }
}

/// The **`NodeIterator`** interface represents an iterator to traverse nodes of
/// a DOM subtree in document order.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator).
extension type NodeIterator._(JSObject _) implements JSObject {
  /// The **`NodeIterator.nextNode()`** method returns the next node
  /// in the set represented by the [NodeIterator] and advances the position of
  /// the iterator within the set. The first call to `nextNode()` returns the
  /// first node in the set.
  ///
  /// This method returns `null` when there are no nodes left in the set.
  ///
  /// In old browsers, as specified in old versions of the specifications, the
  /// method may
  /// throws the `INVALID_STATE_ERR` [DOMException] if this method
  /// is called after the [NodeIterator.detach]method. Recent browsers never
  /// throw.
  Node? nextNode() {
    unsupportedPlatformError();
  }

  /// The **`NodeIterator.previousNode()`** method returns the
  /// previous node in the set represented by the [NodeIterator] and moves the
  /// position of the iterator backwards within the set.
  ///
  /// This method returns `null` when the current node is the first node in the
  /// set.
  ///
  /// In old browsers, as specified in old versions of the specifications, the
  /// method may
  /// throws the `INVALID_STATE_ERR` [DOMException] if this method
  /// is called after the [NodeIterator.detach]method. Recent browsers never
  /// throw.
  Node? previousNode() {
    unsupportedPlatformError();
  }

  /// The **`NodeIterator.detach()`** method is a no-op, kept for
  /// backward compatibility only.
  ///
  /// Originally, it detached the [NodeIterator] from the set over which it
  /// iterates, releasing any resources used by the set and setting the
  /// iterator's state to
  /// `INVALID`. Once this method had been called, calls to other methods on
  /// `NodeIterator` would raise the `INVALID_STATE_ERR` exception.
  void detach() {
    unsupportedPlatformError();
  }

  /// The **`NodeIterator.root`** read-only property represents the
  /// [Node] that is the root of what the [NodeIterator]
  /// traverses.
  Node get root {
    unsupportedPlatformError();
  }

  /// The **`NodeIterator.referenceNode`** read-only property returns the
  /// [Node] to which the iterator is anchored; as new nodes are inserted, the
  /// iterator remains anchored to the reference node as specified by this
  /// property.
  Node get referenceNode {
    unsupportedPlatformError();
  }

  /// The **`NodeIterator.pointerBeforeReferenceNode`** read-only
  /// property returns a boolean flag that indicates whether the
  /// `NodeFilter` is anchored before (if this value is `true`) or
  /// after (if this value is `false`) the anchor node indicated by the
  /// [NodeIterator.referenceNode] property.
  bool get pointerBeforeReferenceNode {
    unsupportedPlatformError();
  }

  /// The **`NodeIterator.whatToShow`** read-only property represents
  /// an `unsigned integer` representing a bitmask signifying what types of
  /// nodes
  /// should be returned by the [NodeIterator].
  int get whatToShow {
    unsupportedPlatformError();
  }

  /// The **`NodeIterator.filter`** read-only property returns a
  /// `NodeFilter` object, that is an object which implements an
  /// `acceptNode(node)` method, used to screen nodes.
  ///
  /// When creating the [NodeIterator], the filter object is passed in as the
  /// third parameter, and the object method `acceptNode(node)` is
  /// called on every single node to determine whether or not to accept it. This
  /// function
  /// should return the constant `NodeFilter.FILTER_ACCEPT` for cases when the
  /// node should be accepted and `NodeFilter.FILTER_REJECT` for cases when the
  /// node should be rejected.
  NodeFilter? get filter {
    unsupportedPlatformError();
  }
}

/// The **`TreeWalker`** object represents the nodes of a document subtree and a
/// position within them.
///
/// A `TreeWalker` can be created using the [Document.createTreeWalker] method.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker).
extension type TreeWalker._(JSObject _) implements JSObject {
  /// The **`TreeWalker.parentNode()`** method moves the current
  /// [Node] to the first _visible_ ancestor node in the document order,
  /// and returns the found node. If no such node exists, or if it is above the
  /// `TreeWalker`'s _root node_, it returns `null` and the current
  /// node is not changed.
  Node? parentNode() {
    unsupportedPlatformError();
  }

  /// The **`TreeWalker.firstChild()`** method moves the current
  /// [Node] to the first _visible_ child of the current node, and returns
  /// the found child. If no such child exists, it returns `null` and the
  /// current node is not changed.
  Node? firstChild() {
    unsupportedPlatformError();
  }

  /// The **`TreeWalker.lastChild()`** method moves the current
  /// [Node] to the last _visible_ child of the current node, and returns
  /// the found child. If no such child exists, it returns `null` and the
  /// current node is not changed.
  Node? lastChild() {
    unsupportedPlatformError();
  }

  /// The **`TreeWalker.previousSibling()`** method moves the current
  /// [Node] to its previous sibling, if any, and returns the found sibling. If
  /// there is no such node, it returns `null` and the current node is not
  /// changed.
  Node? previousSibling() {
    unsupportedPlatformError();
  }

  /// The **`TreeWalker.nextSibling()`** method moves the current
  /// [Node] to its next sibling, if any, and returns the found sibling. If
  /// there
  /// is no such node, it returns `null` and the current node is not changed.
  Node? nextSibling() {
    unsupportedPlatformError();
  }

  /// The **`TreeWalker.previousNode()`** method moves the current
  /// [Node] to the previous _visible_ node in the document order, and
  /// returns the found node. If no such node
  /// exists, or if it is before that the _root node_ defined at the object
  /// construction, it returns `null` and the current node is not changed.
  Node? previousNode() {
    unsupportedPlatformError();
  }

  /// The **`TreeWalker.nextNode()`** method moves the current
  /// [Node] to the next _visible_ node in the document order, and returns
  /// the found node. If no such node exists, it returns `null` and the current
  /// node is not changed.
  Node? nextNode() {
    unsupportedPlatformError();
  }

  /// The **`TreeWalker.root`** read-only property returns the node
  /// that is the root of what the TreeWalker traverses.
  Node get root {
    unsupportedPlatformError();
  }

  /// The **`TreeWalker.whatToShow`** read-only property returns a
  /// bitmask that indicates the types of
  /// [nodes](https://developer.mozilla.org/en-US/docs/Web/API/Node) to show.
  /// Non-matching nodes are skipped, but their
  /// children may be included, if relevant. The possible values are:
  ///
  /// <table class="no-markdown">
  ///   <thead>
  ///     <tr>
  ///       <th>Constant</th>
  ///       <th>Numerical value</th>
  ///       <th>Description</th>
  ///     </tr>
  ///   </thead>
  ///   <tbody>
  ///     <tr>
  ///       <td><code>NodeFilter.SHOW_ALL</code></td>
  ///       <td>
  ///         <code>4294967295</code> (that is the max value of <code>unsigned long</code>)
  ///       </td>
  ///       <td>Shows all nodes.</td>
  ///     </tr>
  ///     <tr>
  ///       <td>
  ///         <code>NodeFilter.SHOW_ATTRIBUTE</code>
  ///       </td>
  ///       <td><code>2</code></td>
  ///       <td>
  /// Shows attribute [Attr] nodes. This is meaningful
  /// only when creating a [TreeWalker] with an
  /// [Attr] node as its root; in this case, it means
  /// that the attribute node will appear in the first position of the
  /// iteration or traversal. Since attributes are never children of other
  /// nodes, they do not appear when traversing over the document tree.
  ///       </td>
  ///     </tr>
  ///     <tr>
  ///       <td>
  ///         <code>NodeFilter.SHOW_CDATA_SECTION</code>
  ///       </td>
  ///       <td><code>8</code></td>
  ///       <td>Shows [CDATASection] nodes.</td>
  ///     </tr>
  ///     <tr>
  ///       <td><code>NodeFilter.SHOW_COMMENT</code></td>
  ///       <td><code>128</code></td>
  ///       <td>Shows [Comment] nodes.</td>
  ///     </tr>
  ///     <tr>
  ///       <td><code>NodeFilter.SHOW_DOCUMENT</code></td>
  ///       <td><code>256</code></td>
  ///       <td>Shows [Document] nodes.</td>
  ///     </tr>
  ///     <tr>
  ///       <td><code>NodeFilter.SHOW_DOCUMENT_FRAGMENT</code></td>
  ///       <td><code>1024</code></td>
  ///       <td>Shows [DocumentFragment] nodes.</td>
  ///     </tr>
  ///     <tr>
  ///       <td><code>NodeFilter.SHOW_DOCUMENT_TYPE</code></td>
  ///       <td><code>512</code></td>
  ///       <td>Shows [DocumentType] nodes.</td>
  ///     </tr>
  ///     <tr>
  ///       <td><code>NodeFilter.SHOW_ELEMENT</code></td>
  ///       <td><code>1</code></td>
  ///       <td>Shows [Element] nodes.</td>
  ///     </tr>
  ///     <tr>
  ///       <td><code>NodeFilter.SHOW_ENTITY</code> </td>
  ///       <td><code>32</code></td>
  ///       <td>Legacy, no more used.</td>
  ///     </tr>
  ///     <tr>
  ///       <td>
  ///         <code>NodeFilter.SHOW_ENTITY_REFERENCE</code>
  ///       </td>
  ///       <td><code>16</code></td>
  ///       <td>Legacy, no more used.</td>
  ///     </tr>
  ///     <tr>
  ///       <td>
  ///         <code>NodeFilter.SHOW_NOTATION</code>
  ///       </td>
  ///       <td><code>2048</code></td>
  ///       <td>Legacy, no more used.</td>
  ///     </tr>
  ///     <tr>
  ///       <td><code>NodeFilter.SHOW_PROCESSING_INSTRUCTION</code></td>
  ///       <td><code>64</code></td>
  ///       <td>Shows [ProcessingInstruction] nodes.</td>
  ///     </tr>
  ///     <tr>
  ///       <td><code>NodeFilter.SHOW_TEXT</code></td>
  ///       <td><code>4</code></td>
  ///       <td>Shows [Text] nodes.</td>
  ///     </tr>
  ///   </tbody>
  /// </table>
  int get whatToShow {
    unsupportedPlatformError();
  }

  /// The **`TreeWalker.filter`** read-only property returns a
  /// `NodeFilter` that is the filtering object associated with the
  /// [TreeWalker].
  ///
  /// When creating the `TreeWalker`, the filter object is passed in as the
  /// third
  /// parameter, and its method `acceptNode()` is called on every
  /// single node to determine whether or not to accept it.
  NodeFilter? get filter {
    unsupportedPlatformError();
  }

  /// The **`TreeWalker.currentNode`** property represents the
  /// [Node] which the [TreeWalker] is currently pointing at.
  Node get currentNode {
    unsupportedPlatformError();
  }

  set currentNode(Node value) {
    unsupportedPlatformError();
  }
}

/// The **`DOMTokenList`** interface represents a set of space-separated tokens.
/// Such a set is returned by [Element.classList] or [HTMLLinkElement.relList],
/// and many others.
///
/// A `DOMTokenList` is indexed beginning with `0` as with JavaScript `Array`
/// objects. `DOMTokenList` is always case-sensitive.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList).
extension type DOMTokenList._(JSObject _) implements JSObject {
  /// The **`item()`** method of the [DOMTokenList] interface returns an item in
  /// the list,
  /// determined by its position in the list, its index.
  ///
  /// > **Note:** This method is equivalent as the
  /// > [bracket notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation).
  /// > So `aList.item(i)` is the same as `aList[i]`.
  String? item(int index) {
    unsupportedPlatformError();
  }

  /// The **`contains()`** method of the [DOMTokenList] interface
  /// returns a boolean value — `true` if the underlying list contains the given
  /// token,
  /// otherwise `false`.
  bool contains(String token) {
    unsupportedPlatformError();
  }

  /// The **`add()`** method of the [DOMTokenList] interface adds the given
  /// tokens to the list, omitting any that are already present.
  void add(String tokens) {
    unsupportedPlatformError();
  }

  /// The **`remove()`** method of the [DOMTokenList] interface
  /// removes the specified _tokens_ from the list.
  void remove(String tokens) {
    unsupportedPlatformError();
  }

  /// The **`toggle()`** method of the [DOMTokenList] interface
  /// removes an existing token from the list and returns `false`.
  /// If the token doesn't exist it's added and the function returns `true`.
  bool toggle(
    String token, [
    bool? force,
  ]) {
    unsupportedPlatformError();
  }

  /// The **`replace()`** method of the [DOMTokenList] interface
  /// replaces an existing token with a new token.
  /// If the first token doesn't exist, `replace()` returns `false` immediately,
  /// without adding the new token to the token list.
  bool replace(
    String token,
    String newToken,
  ) {
    unsupportedPlatformError();
  }

  /// The **`supports()`** method of the [DOMTokenList] interface
  /// returns `true` if a given `token` is in the associated attribute's
  /// supported tokens.
  /// This method is intended to support feature detection.
  bool supports(String token) {
    unsupportedPlatformError();
  }

  /// The read-only **`length`** property of the [DOMTokenList] interface is an
  /// `integer` representing the number
  /// of objects stored in the object.
  int get length {
    unsupportedPlatformError();
  }

  /// The **`value`** property of the [DOMTokenList]
  /// interface is a  that returns the value of the list serialized as a
  /// string, or clears and sets the list to the given value.
  String get value {
    unsupportedPlatformError();
  }

  set value(String value) {
    unsupportedPlatformError();
  }
}

/// The **`XPathResult`** interface represents the results generated by
/// evaluating an XPath expression within the context of a given node.
///
/// Since XPath expressions can result in a variety of result types, this
/// interface makes it possible to determine and handle the type and value of
/// the result.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult).
extension type XPathResult._(JSObject _) implements JSObject {
  static const int ANY_TYPE = 0;

  static const int NUMBER_TYPE = 1;

  static const int STRING_TYPE = 2;

  static const int BOOLEAN_TYPE = 3;

  static const int UNORDERED_NODE_ITERATOR_TYPE = 4;

  static const int ORDERED_NODE_ITERATOR_TYPE = 5;

  static const int UNORDERED_NODE_SNAPSHOT_TYPE = 6;

  static const int ORDERED_NODE_SNAPSHOT_TYPE = 7;

  static const int ANY_UNORDERED_NODE_TYPE = 8;

  static const int FIRST_ORDERED_NODE_TYPE = 9;

  /// The **`iterateNext()`** method of the
  /// [XPathResult] interface iterates over a node set result and returns the
  /// next node from it or `null` if there are no more nodes.
  Node? iterateNext() {
    unsupportedPlatformError();
  }

  /// The **`snapshotItem()`** method of the
  /// [XPathResult] interface returns an item of the snapshot collection or
  /// `null` in case the index is not within the range of nodes. Unlike the
  /// iterator result, the snapshot does not become invalid, but may not
  /// correspond to the
  /// current document if it is mutated.
  Node? snapshotItem(int index) {
    unsupportedPlatformError();
  }

  /// The read-only **`resultType`** property of the
  /// [XPathResult] interface represents the type of the result, as defined by
  /// the type constants.
  int get resultType {
    unsupportedPlatformError();
  }

  /// The read-only **`numberValue`** property of the
  /// [XPathResult] interface returns the numeric value of a result with
  /// [XPathResult.resultType] being `NUMBER_TYPE`.
  double get numberValue {
    unsupportedPlatformError();
  }

  /// The read-only **`stringValue`** property of the
  /// [XPathResult] interface returns the string value of a result with
  /// [XPathResult.resultType] being `STRING_TYPE`.
  String get stringValue {
    unsupportedPlatformError();
  }

  /// The read-only **`booleanValue`** property of the
  /// [XPathResult] interface returns the boolean value of a result with
  /// [XPathResult.resultType] being `BOOLEAN_TYPE`.
  bool get booleanValue {
    unsupportedPlatformError();
  }

  /// The read-only **`singleNodeValue`** property of the
  /// [XPathResult] interface returns a [Node] value or
  /// `null` in case no node was matched of a result with
  /// [XPathResult.resultType] being `ANY_UNORDERED_NODE_TYPE` or
  /// `FIRST_ORDERED_NODE_TYPE`.
  Node? get singleNodeValue {
    unsupportedPlatformError();
  }

  /// The read-only **`invalidIteratorState`** property of the
  /// [XPathResult] interface signifies that the iterator has become invalid. It
  /// is `true` if [XPathResult.resultType] is
  /// `UNORDERED_NODE_ITERATOR_TYPE` or `ORDERED_NODE_ITERATOR_TYPE` and
  /// the document has been modified since this result was returned.
  bool get invalidIteratorState {
    unsupportedPlatformError();
  }

  /// The read-only **`snapshotLength`** property of the
  /// [XPathResult] interface represents the number of nodes in the result
  /// snapshot.
  int get snapshotLength {
    unsupportedPlatformError();
  }
}

/// This interface is a compiled XPath expression that can be evaluated on a
/// document or specific node to return information from its  tree.
///
/// This is useful when an expression will be reused in an application, because
/// it is just compiled once and all namespace prefixes which occur within the
/// expression are preresolved.
///
/// Objects of this type are created by calling
/// [XPathEvaluator.createExpression].
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression).
extension type XPathExpression._(JSObject _) implements JSObject {
  /// The **`evaluate()`** method of the
  /// [XPathExpression] interface executes an
  /// [XPath](https://developer.mozilla.org/en-US/docs/Web/XPath) expression on
  /// the given node or document and
  /// returns an [XPathResult].
  XPathResult evaluate(
    Node contextNode, [
    int? type,
    XPathResult? result,
  ]) {
    unsupportedPlatformError();
  }
}

/// The `XPathEvaluator` interface allows to compile and evaluate  expressions.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator).
extension type XPathEvaluator._(JSObject _) implements JSObject {
  factory XPathEvaluator() {
    unsupportedPlatformError();
  }

  /// This method compiles an [XPathExpression] which can then be used for
  /// (repeated) evaluations of the  expression.
  XPathExpression createExpression(
    String expression, [
    XPathNSResolver? resolver,
  ]) {
    unsupportedPlatformError();
  }

  /// This method adapts any DOM node to resolve namespaces so that an XPath
  /// expression can
  /// be easily evaluated relative to the context of the node where it appeared
  /// within the
  /// document.
  ///
  /// This adapter works like the DOM Level 3 method [Node.lookupNamespaceURI]
  /// in resolving the namespace URI from a given prefix using
  /// the current information available in the node's hierarchy at the time the
  /// method is
  /// called, also correctly resolving the implicit `xml` prefix.
  Node createNSResolver(Node nodeResolver) {
    unsupportedPlatformError();
  }

  /// The `evaluate()` method of the [XPathEvaluator] interface
  /// executes an XPath expression on the given node or document and returns an
  /// [XPathResult].
  XPathResult evaluate(
    String expression,
    Node contextNode, [
    XPathNSResolver? resolver,
    int? type,
    XPathResult? result,
  ]) {
    unsupportedPlatformError();
  }
}

/// An **`XSLTProcessor`** applies an
/// [XSLT](https://developer.mozilla.org/en-US/docs/Web/XSLT) stylesheet
/// transformation to an XML document to
/// produce a new XML document as output. It has methods to load the XSLT
/// stylesheet, to
/// manipulate `<xsl:param>` parameter values, and to apply the
/// transformation to documents.
///
/// ---
///
/// API documentation sourced from
/// [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor).
extension type XSLTProcessor._(JSObject _) implements JSObject {
  factory XSLTProcessor() {
    unsupportedPlatformError();
  }

  /// The `importStylesheet()` method of the [XSLTProcessor] interface imports
  /// an XSLT stylesheet for the processor.
  void importStylesheet(Node style) {
    unsupportedPlatformError();
  }

  /// The `transformToFragment()` method of the [XSLTProcessor] interface
  /// transforms a provided [Node] source to a [DocumentFragment] using the XSLT
  /// stylesheet associated with the `XSLTProcessor`.
  DocumentFragment transformToFragment(
    Node source,
    Document output,
  ) {
    unsupportedPlatformError();
  }

  /// The `transformToDocument()` method of the [XSLTProcessor] interface
  /// transforms the provided [Node] source to a [Document] using the XSLT
  /// stylesheet associated with `XSLTProcessor`.
  Document transformToDocument(Node source) {
    unsupportedPlatformError();
  }

  /// The `setParameter()` method of the [XSLTProcessor] interface sets the
  /// value of a parameter (`<xsl:param>`) in the stylesheet imported in the
  /// processor.
  void setParameter(
    String namespaceURI,
    String localName,
    JSAny? value,
  ) {
    unsupportedPlatformError();
  }

  /// The `getParameter()` method of the [XSLTProcessor] interface returns the
  /// value of a parameter (`<xsl:param>`) from the stylesheet imported in the
  /// processor.
  JSAny? getParameter(
    String namespaceURI,
    String localName,
  ) {
    unsupportedPlatformError();
  }

  /// The `removeParameter()` method of the [XSLTProcessor] interface removes
  /// the parameter (`<xsl:param>`) and its value from the stylesheet imported
  /// in the processor.
  void removeParameter(
    String namespaceURI,
    String localName,
  ) {
    unsupportedPlatformError();
  }

  /// The `clearParameters()` method of the [XSLTProcessor] interface removes
  /// all parameters (`<xsl:param>`) and their values from the stylesheet
  /// imported in the processor. The `XSLTProcessor` will then use the default
  /// values specified in the XSLT stylesheet.
  void clearParameters() {
    unsupportedPlatformError();
  }

  /// The `reset()` method of the [XSLTProcessor] interface removes all
  /// parameters (`<xsl:param>`) and the XSLT stylesheet from the processor. The
  /// `XSLTProcessor` will then be in its original state when it was created.
  void reset() {
    unsupportedPlatformError();
  }
}
